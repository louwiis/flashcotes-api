
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Bookmaker
 * 
 */
export type Bookmaker = $Result.DefaultSelection<Prisma.$BookmakerPayload>
/**
 * Model Sport
 * 
 */
export type Sport = $Result.DefaultSelection<Prisma.$SportPayload>
/**
 * Model League
 * 
 */
export type League = $Result.DefaultSelection<Prisma.$LeaguePayload>
/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model BookmakerSport
 * 
 */
export type BookmakerSport = $Result.DefaultSelection<Prisma.$BookmakerSportPayload>
/**
 * Model BookmakerLeague
 * 
 */
export type BookmakerLeague = $Result.DefaultSelection<Prisma.$BookmakerLeaguePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bookmakers
 * const bookmakers = await prisma.bookmaker.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bookmakers
   * const bookmakers = await prisma.bookmaker.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.bookmaker`: Exposes CRUD operations for the **Bookmaker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookmakers
    * const bookmakers = await prisma.bookmaker.findMany()
    * ```
    */
  get bookmaker(): Prisma.BookmakerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sport`: Exposes CRUD operations for the **Sport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sports
    * const sports = await prisma.sport.findMany()
    * ```
    */
  get sport(): Prisma.SportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.league`: Exposes CRUD operations for the **League** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leagues
    * const leagues = await prisma.league.findMany()
    * ```
    */
  get league(): Prisma.LeagueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookmakerSport`: Exposes CRUD operations for the **BookmakerSport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookmakerSports
    * const bookmakerSports = await prisma.bookmakerSport.findMany()
    * ```
    */
  get bookmakerSport(): Prisma.BookmakerSportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookmakerLeague`: Exposes CRUD operations for the **BookmakerLeague** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookmakerLeagues
    * const bookmakerLeagues = await prisma.bookmakerLeague.findMany()
    * ```
    */
  get bookmakerLeague(): Prisma.BookmakerLeagueDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.1
   * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Bookmaker: 'Bookmaker',
    Sport: 'Sport',
    League: 'League',
    Country: 'Country',
    BookmakerSport: 'BookmakerSport',
    BookmakerLeague: 'BookmakerLeague'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "bookmaker" | "sport" | "league" | "country" | "bookmakerSport" | "bookmakerLeague"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Bookmaker: {
        payload: Prisma.$BookmakerPayload<ExtArgs>
        fields: Prisma.BookmakerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookmakerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookmakerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload>
          }
          findFirst: {
            args: Prisma.BookmakerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookmakerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload>
          }
          findMany: {
            args: Prisma.BookmakerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload>[]
          }
          create: {
            args: Prisma.BookmakerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload>
          }
          createMany: {
            args: Prisma.BookmakerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookmakerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload>[]
          }
          delete: {
            args: Prisma.BookmakerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload>
          }
          update: {
            args: Prisma.BookmakerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload>
          }
          deleteMany: {
            args: Prisma.BookmakerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookmakerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookmakerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload>[]
          }
          upsert: {
            args: Prisma.BookmakerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerPayload>
          }
          aggregate: {
            args: Prisma.BookmakerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookmaker>
          }
          groupBy: {
            args: Prisma.BookmakerGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookmakerGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookmakerCountArgs<ExtArgs>
            result: $Utils.Optional<BookmakerCountAggregateOutputType> | number
          }
        }
      }
      Sport: {
        payload: Prisma.$SportPayload<ExtArgs>
        fields: Prisma.SportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          findFirst: {
            args: Prisma.SportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          findMany: {
            args: Prisma.SportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>[]
          }
          create: {
            args: Prisma.SportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          createMany: {
            args: Prisma.SportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>[]
          }
          delete: {
            args: Prisma.SportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          update: {
            args: Prisma.SportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          deleteMany: {
            args: Prisma.SportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>[]
          }
          upsert: {
            args: Prisma.SportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          aggregate: {
            args: Prisma.SportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSport>
          }
          groupBy: {
            args: Prisma.SportGroupByArgs<ExtArgs>
            result: $Utils.Optional<SportGroupByOutputType>[]
          }
          count: {
            args: Prisma.SportCountArgs<ExtArgs>
            result: $Utils.Optional<SportCountAggregateOutputType> | number
          }
        }
      }
      League: {
        payload: Prisma.$LeaguePayload<ExtArgs>
        fields: Prisma.LeagueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeagueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeagueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          findFirst: {
            args: Prisma.LeagueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeagueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          findMany: {
            args: Prisma.LeagueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          create: {
            args: Prisma.LeagueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          createMany: {
            args: Prisma.LeagueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeagueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          delete: {
            args: Prisma.LeagueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          update: {
            args: Prisma.LeagueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          deleteMany: {
            args: Prisma.LeagueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeagueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeagueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          upsert: {
            args: Prisma.LeagueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          aggregate: {
            args: Prisma.LeagueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeague>
          }
          groupBy: {
            args: Prisma.LeagueGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeagueGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeagueCountArgs<ExtArgs>
            result: $Utils.Optional<LeagueCountAggregateOutputType> | number
          }
        }
      }
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          createMany: {
            args: Prisma.CountryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CountryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CountryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      BookmakerSport: {
        payload: Prisma.$BookmakerSportPayload<ExtArgs>
        fields: Prisma.BookmakerSportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookmakerSportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookmakerSportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload>
          }
          findFirst: {
            args: Prisma.BookmakerSportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookmakerSportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload>
          }
          findMany: {
            args: Prisma.BookmakerSportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload>[]
          }
          create: {
            args: Prisma.BookmakerSportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload>
          }
          createMany: {
            args: Prisma.BookmakerSportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookmakerSportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload>[]
          }
          delete: {
            args: Prisma.BookmakerSportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload>
          }
          update: {
            args: Prisma.BookmakerSportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload>
          }
          deleteMany: {
            args: Prisma.BookmakerSportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookmakerSportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookmakerSportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload>[]
          }
          upsert: {
            args: Prisma.BookmakerSportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerSportPayload>
          }
          aggregate: {
            args: Prisma.BookmakerSportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookmakerSport>
          }
          groupBy: {
            args: Prisma.BookmakerSportGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookmakerSportGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookmakerSportCountArgs<ExtArgs>
            result: $Utils.Optional<BookmakerSportCountAggregateOutputType> | number
          }
        }
      }
      BookmakerLeague: {
        payload: Prisma.$BookmakerLeaguePayload<ExtArgs>
        fields: Prisma.BookmakerLeagueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookmakerLeagueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookmakerLeagueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload>
          }
          findFirst: {
            args: Prisma.BookmakerLeagueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookmakerLeagueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload>
          }
          findMany: {
            args: Prisma.BookmakerLeagueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload>[]
          }
          create: {
            args: Prisma.BookmakerLeagueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload>
          }
          createMany: {
            args: Prisma.BookmakerLeagueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookmakerLeagueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload>[]
          }
          delete: {
            args: Prisma.BookmakerLeagueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload>
          }
          update: {
            args: Prisma.BookmakerLeagueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload>
          }
          deleteMany: {
            args: Prisma.BookmakerLeagueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookmakerLeagueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookmakerLeagueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload>[]
          }
          upsert: {
            args: Prisma.BookmakerLeagueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmakerLeaguePayload>
          }
          aggregate: {
            args: Prisma.BookmakerLeagueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookmakerLeague>
          }
          groupBy: {
            args: Prisma.BookmakerLeagueGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookmakerLeagueGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookmakerLeagueCountArgs<ExtArgs>
            result: $Utils.Optional<BookmakerLeagueCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    bookmaker?: BookmakerOmit
    sport?: SportOmit
    league?: LeagueOmit
    country?: CountryOmit
    bookmakerSport?: BookmakerSportOmit
    bookmakerLeague?: BookmakerLeagueOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BookmakerCountOutputType
   */

  export type BookmakerCountOutputType = {
    leagueLinks: number
    sportLinks: number
  }

  export type BookmakerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leagueLinks?: boolean | BookmakerCountOutputTypeCountLeagueLinksArgs
    sportLinks?: boolean | BookmakerCountOutputTypeCountSportLinksArgs
  }

  // Custom InputTypes
  /**
   * BookmakerCountOutputType without action
   */
  export type BookmakerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerCountOutputType
     */
    select?: BookmakerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BookmakerCountOutputType without action
   */
  export type BookmakerCountOutputTypeCountLeagueLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmakerLeagueWhereInput
  }

  /**
   * BookmakerCountOutputType without action
   */
  export type BookmakerCountOutputTypeCountSportLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmakerSportWhereInput
  }


  /**
   * Count Type SportCountOutputType
   */

  export type SportCountOutputType = {
    leagues: number
    bookmakerLinks: number
  }

  export type SportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leagues?: boolean | SportCountOutputTypeCountLeaguesArgs
    bookmakerLinks?: boolean | SportCountOutputTypeCountBookmakerLinksArgs
  }

  // Custom InputTypes
  /**
   * SportCountOutputType without action
   */
  export type SportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SportCountOutputType
     */
    select?: SportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SportCountOutputType without action
   */
  export type SportCountOutputTypeCountLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
  }

  /**
   * SportCountOutputType without action
   */
  export type SportCountOutputTypeCountBookmakerLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmakerSportWhereInput
  }


  /**
   * Count Type LeagueCountOutputType
   */

  export type LeagueCountOutputType = {
    bookmakerLinks: number
  }

  export type LeagueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmakerLinks?: boolean | LeagueCountOutputTypeCountBookmakerLinksArgs
  }

  // Custom InputTypes
  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueCountOutputType
     */
    select?: LeagueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeCountBookmakerLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmakerLeagueWhereInput
  }


  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    leagues: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leagues?: boolean | CountryCountOutputTypeCountLeaguesArgs
  }

  // Custom InputTypes
  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Bookmaker
   */

  export type AggregateBookmaker = {
    _count: BookmakerCountAggregateOutputType | null
    _min: BookmakerMinAggregateOutputType | null
    _max: BookmakerMaxAggregateOutputType | null
  }

  export type BookmakerMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookmakerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookmakerCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookmakerMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookmakerMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookmakerCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookmakerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookmaker to aggregate.
     */
    where?: BookmakerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmakers to fetch.
     */
    orderBy?: BookmakerOrderByWithRelationInput | BookmakerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookmakerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookmakers
    **/
    _count?: true | BookmakerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmakerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmakerMaxAggregateInputType
  }

  export type GetBookmakerAggregateType<T extends BookmakerAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmaker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmaker[P]>
      : GetScalarType<T[P], AggregateBookmaker[P]>
  }




  export type BookmakerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmakerWhereInput
    orderBy?: BookmakerOrderByWithAggregationInput | BookmakerOrderByWithAggregationInput[]
    by: BookmakerScalarFieldEnum[] | BookmakerScalarFieldEnum
    having?: BookmakerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmakerCountAggregateInputType | true
    _min?: BookmakerMinAggregateInputType
    _max?: BookmakerMaxAggregateInputType
  }

  export type BookmakerGroupByOutputType = {
    id: string
    name: string
    slug: string
    createdAt: Date
    updatedAt: Date
    _count: BookmakerCountAggregateOutputType | null
    _min: BookmakerMinAggregateOutputType | null
    _max: BookmakerMaxAggregateOutputType | null
  }

  type GetBookmakerGroupByPayload<T extends BookmakerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmakerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmakerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmakerGroupByOutputType[P]>
            : GetScalarType<T[P], BookmakerGroupByOutputType[P]>
        }
      >
    >


  export type BookmakerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    leagueLinks?: boolean | Bookmaker$leagueLinksArgs<ExtArgs>
    sportLinks?: boolean | Bookmaker$sportLinksArgs<ExtArgs>
    _count?: boolean | BookmakerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmaker"]>

  export type BookmakerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["bookmaker"]>

  export type BookmakerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["bookmaker"]>

  export type BookmakerSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookmakerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "createdAt" | "updatedAt", ExtArgs["result"]["bookmaker"]>
  export type BookmakerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leagueLinks?: boolean | Bookmaker$leagueLinksArgs<ExtArgs>
    sportLinks?: boolean | Bookmaker$sportLinksArgs<ExtArgs>
    _count?: boolean | BookmakerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BookmakerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BookmakerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BookmakerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bookmaker"
    objects: {
      leagueLinks: Prisma.$BookmakerLeaguePayload<ExtArgs>[]
      sportLinks: Prisma.$BookmakerSportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bookmaker"]>
    composites: {}
  }

  type BookmakerGetPayload<S extends boolean | null | undefined | BookmakerDefaultArgs> = $Result.GetResult<Prisma.$BookmakerPayload, S>

  type BookmakerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookmakerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookmakerCountAggregateInputType | true
    }

  export interface BookmakerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bookmaker'], meta: { name: 'Bookmaker' } }
    /**
     * Find zero or one Bookmaker that matches the filter.
     * @param {BookmakerFindUniqueArgs} args - Arguments to find a Bookmaker
     * @example
     * // Get one Bookmaker
     * const bookmaker = await prisma.bookmaker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookmakerFindUniqueArgs>(args: SelectSubset<T, BookmakerFindUniqueArgs<ExtArgs>>): Prisma__BookmakerClient<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bookmaker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookmakerFindUniqueOrThrowArgs} args - Arguments to find a Bookmaker
     * @example
     * // Get one Bookmaker
     * const bookmaker = await prisma.bookmaker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookmakerFindUniqueOrThrowArgs>(args: SelectSubset<T, BookmakerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookmakerClient<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bookmaker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerFindFirstArgs} args - Arguments to find a Bookmaker
     * @example
     * // Get one Bookmaker
     * const bookmaker = await prisma.bookmaker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookmakerFindFirstArgs>(args?: SelectSubset<T, BookmakerFindFirstArgs<ExtArgs>>): Prisma__BookmakerClient<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bookmaker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerFindFirstOrThrowArgs} args - Arguments to find a Bookmaker
     * @example
     * // Get one Bookmaker
     * const bookmaker = await prisma.bookmaker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookmakerFindFirstOrThrowArgs>(args?: SelectSubset<T, BookmakerFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookmakerClient<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bookmakers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookmakers
     * const bookmakers = await prisma.bookmaker.findMany()
     * 
     * // Get first 10 Bookmakers
     * const bookmakers = await prisma.bookmaker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookmakerWithIdOnly = await prisma.bookmaker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookmakerFindManyArgs>(args?: SelectSubset<T, BookmakerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bookmaker.
     * @param {BookmakerCreateArgs} args - Arguments to create a Bookmaker.
     * @example
     * // Create one Bookmaker
     * const Bookmaker = await prisma.bookmaker.create({
     *   data: {
     *     // ... data to create a Bookmaker
     *   }
     * })
     * 
     */
    create<T extends BookmakerCreateArgs>(args: SelectSubset<T, BookmakerCreateArgs<ExtArgs>>): Prisma__BookmakerClient<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bookmakers.
     * @param {BookmakerCreateManyArgs} args - Arguments to create many Bookmakers.
     * @example
     * // Create many Bookmakers
     * const bookmaker = await prisma.bookmaker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookmakerCreateManyArgs>(args?: SelectSubset<T, BookmakerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bookmakers and returns the data saved in the database.
     * @param {BookmakerCreateManyAndReturnArgs} args - Arguments to create many Bookmakers.
     * @example
     * // Create many Bookmakers
     * const bookmaker = await prisma.bookmaker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bookmakers and only return the `id`
     * const bookmakerWithIdOnly = await prisma.bookmaker.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookmakerCreateManyAndReturnArgs>(args?: SelectSubset<T, BookmakerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bookmaker.
     * @param {BookmakerDeleteArgs} args - Arguments to delete one Bookmaker.
     * @example
     * // Delete one Bookmaker
     * const Bookmaker = await prisma.bookmaker.delete({
     *   where: {
     *     // ... filter to delete one Bookmaker
     *   }
     * })
     * 
     */
    delete<T extends BookmakerDeleteArgs>(args: SelectSubset<T, BookmakerDeleteArgs<ExtArgs>>): Prisma__BookmakerClient<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bookmaker.
     * @param {BookmakerUpdateArgs} args - Arguments to update one Bookmaker.
     * @example
     * // Update one Bookmaker
     * const bookmaker = await prisma.bookmaker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookmakerUpdateArgs>(args: SelectSubset<T, BookmakerUpdateArgs<ExtArgs>>): Prisma__BookmakerClient<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bookmakers.
     * @param {BookmakerDeleteManyArgs} args - Arguments to filter Bookmakers to delete.
     * @example
     * // Delete a few Bookmakers
     * const { count } = await prisma.bookmaker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookmakerDeleteManyArgs>(args?: SelectSubset<T, BookmakerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookmakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookmakers
     * const bookmaker = await prisma.bookmaker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookmakerUpdateManyArgs>(args: SelectSubset<T, BookmakerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookmakers and returns the data updated in the database.
     * @param {BookmakerUpdateManyAndReturnArgs} args - Arguments to update many Bookmakers.
     * @example
     * // Update many Bookmakers
     * const bookmaker = await prisma.bookmaker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bookmakers and only return the `id`
     * const bookmakerWithIdOnly = await prisma.bookmaker.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookmakerUpdateManyAndReturnArgs>(args: SelectSubset<T, BookmakerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bookmaker.
     * @param {BookmakerUpsertArgs} args - Arguments to update or create a Bookmaker.
     * @example
     * // Update or create a Bookmaker
     * const bookmaker = await prisma.bookmaker.upsert({
     *   create: {
     *     // ... data to create a Bookmaker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bookmaker we want to update
     *   }
     * })
     */
    upsert<T extends BookmakerUpsertArgs>(args: SelectSubset<T, BookmakerUpsertArgs<ExtArgs>>): Prisma__BookmakerClient<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bookmakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerCountArgs} args - Arguments to filter Bookmakers to count.
     * @example
     * // Count the number of Bookmakers
     * const count = await prisma.bookmaker.count({
     *   where: {
     *     // ... the filter for the Bookmakers we want to count
     *   }
     * })
    **/
    count<T extends BookmakerCountArgs>(
      args?: Subset<T, BookmakerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmakerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bookmaker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmakerAggregateArgs>(args: Subset<T, BookmakerAggregateArgs>): Prisma.PrismaPromise<GetBookmakerAggregateType<T>>

    /**
     * Group by Bookmaker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookmakerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookmakerGroupByArgs['orderBy'] }
        : { orderBy?: BookmakerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookmakerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmakerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bookmaker model
   */
  readonly fields: BookmakerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bookmaker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookmakerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leagueLinks<T extends Bookmaker$leagueLinksArgs<ExtArgs> = {}>(args?: Subset<T, Bookmaker$leagueLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sportLinks<T extends Bookmaker$sportLinksArgs<ExtArgs> = {}>(args?: Subset<T, Bookmaker$sportLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bookmaker model
   */
  interface BookmakerFieldRefs {
    readonly id: FieldRef<"Bookmaker", 'String'>
    readonly name: FieldRef<"Bookmaker", 'String'>
    readonly slug: FieldRef<"Bookmaker", 'String'>
    readonly createdAt: FieldRef<"Bookmaker", 'DateTime'>
    readonly updatedAt: FieldRef<"Bookmaker", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Bookmaker findUnique
   */
  export type BookmakerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerInclude<ExtArgs> | null
    /**
     * Filter, which Bookmaker to fetch.
     */
    where: BookmakerWhereUniqueInput
  }

  /**
   * Bookmaker findUniqueOrThrow
   */
  export type BookmakerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerInclude<ExtArgs> | null
    /**
     * Filter, which Bookmaker to fetch.
     */
    where: BookmakerWhereUniqueInput
  }

  /**
   * Bookmaker findFirst
   */
  export type BookmakerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerInclude<ExtArgs> | null
    /**
     * Filter, which Bookmaker to fetch.
     */
    where?: BookmakerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmakers to fetch.
     */
    orderBy?: BookmakerOrderByWithRelationInput | BookmakerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookmakers.
     */
    cursor?: BookmakerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookmakers.
     */
    distinct?: BookmakerScalarFieldEnum | BookmakerScalarFieldEnum[]
  }

  /**
   * Bookmaker findFirstOrThrow
   */
  export type BookmakerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerInclude<ExtArgs> | null
    /**
     * Filter, which Bookmaker to fetch.
     */
    where?: BookmakerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmakers to fetch.
     */
    orderBy?: BookmakerOrderByWithRelationInput | BookmakerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookmakers.
     */
    cursor?: BookmakerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookmakers.
     */
    distinct?: BookmakerScalarFieldEnum | BookmakerScalarFieldEnum[]
  }

  /**
   * Bookmaker findMany
   */
  export type BookmakerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerInclude<ExtArgs> | null
    /**
     * Filter, which Bookmakers to fetch.
     */
    where?: BookmakerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmakers to fetch.
     */
    orderBy?: BookmakerOrderByWithRelationInput | BookmakerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookmakers.
     */
    cursor?: BookmakerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmakers.
     */
    skip?: number
    distinct?: BookmakerScalarFieldEnum | BookmakerScalarFieldEnum[]
  }

  /**
   * Bookmaker create
   */
  export type BookmakerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerInclude<ExtArgs> | null
    /**
     * The data needed to create a Bookmaker.
     */
    data: XOR<BookmakerCreateInput, BookmakerUncheckedCreateInput>
  }

  /**
   * Bookmaker createMany
   */
  export type BookmakerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookmakers.
     */
    data: BookmakerCreateManyInput | BookmakerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bookmaker createManyAndReturn
   */
  export type BookmakerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * The data used to create many Bookmakers.
     */
    data: BookmakerCreateManyInput | BookmakerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bookmaker update
   */
  export type BookmakerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerInclude<ExtArgs> | null
    /**
     * The data needed to update a Bookmaker.
     */
    data: XOR<BookmakerUpdateInput, BookmakerUncheckedUpdateInput>
    /**
     * Choose, which Bookmaker to update.
     */
    where: BookmakerWhereUniqueInput
  }

  /**
   * Bookmaker updateMany
   */
  export type BookmakerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookmakers.
     */
    data: XOR<BookmakerUpdateManyMutationInput, BookmakerUncheckedUpdateManyInput>
    /**
     * Filter which Bookmakers to update
     */
    where?: BookmakerWhereInput
    /**
     * Limit how many Bookmakers to update.
     */
    limit?: number
  }

  /**
   * Bookmaker updateManyAndReturn
   */
  export type BookmakerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * The data used to update Bookmakers.
     */
    data: XOR<BookmakerUpdateManyMutationInput, BookmakerUncheckedUpdateManyInput>
    /**
     * Filter which Bookmakers to update
     */
    where?: BookmakerWhereInput
    /**
     * Limit how many Bookmakers to update.
     */
    limit?: number
  }

  /**
   * Bookmaker upsert
   */
  export type BookmakerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerInclude<ExtArgs> | null
    /**
     * The filter to search for the Bookmaker to update in case it exists.
     */
    where: BookmakerWhereUniqueInput
    /**
     * In case the Bookmaker found by the `where` argument doesn't exist, create a new Bookmaker with this data.
     */
    create: XOR<BookmakerCreateInput, BookmakerUncheckedCreateInput>
    /**
     * In case the Bookmaker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookmakerUpdateInput, BookmakerUncheckedUpdateInput>
  }

  /**
   * Bookmaker delete
   */
  export type BookmakerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerInclude<ExtArgs> | null
    /**
     * Filter which Bookmaker to delete.
     */
    where: BookmakerWhereUniqueInput
  }

  /**
   * Bookmaker deleteMany
   */
  export type BookmakerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookmakers to delete
     */
    where?: BookmakerWhereInput
    /**
     * Limit how many Bookmakers to delete.
     */
    limit?: number
  }

  /**
   * Bookmaker.leagueLinks
   */
  export type Bookmaker$leagueLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    where?: BookmakerLeagueWhereInput
    orderBy?: BookmakerLeagueOrderByWithRelationInput | BookmakerLeagueOrderByWithRelationInput[]
    cursor?: BookmakerLeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmakerLeagueScalarFieldEnum | BookmakerLeagueScalarFieldEnum[]
  }

  /**
   * Bookmaker.sportLinks
   */
  export type Bookmaker$sportLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    where?: BookmakerSportWhereInput
    orderBy?: BookmakerSportOrderByWithRelationInput | BookmakerSportOrderByWithRelationInput[]
    cursor?: BookmakerSportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmakerSportScalarFieldEnum | BookmakerSportScalarFieldEnum[]
  }

  /**
   * Bookmaker without action
   */
  export type BookmakerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmaker
     */
    select?: BookmakerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmaker
     */
    omit?: BookmakerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerInclude<ExtArgs> | null
  }


  /**
   * Model Sport
   */

  export type AggregateSport = {
    _count: SportCountAggregateOutputType | null
    _min: SportMinAggregateOutputType | null
    _max: SportMaxAggregateOutputType | null
  }

  export type SportMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SportMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SportCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    icon: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SportMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SportMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SportCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sport to aggregate.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sports
    **/
    _count?: true | SportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SportMaxAggregateInputType
  }

  export type GetSportAggregateType<T extends SportAggregateArgs> = {
        [P in keyof T & keyof AggregateSport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSport[P]>
      : GetScalarType<T[P], AggregateSport[P]>
  }




  export type SportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SportWhereInput
    orderBy?: SportOrderByWithAggregationInput | SportOrderByWithAggregationInput[]
    by: SportScalarFieldEnum[] | SportScalarFieldEnum
    having?: SportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SportCountAggregateInputType | true
    _min?: SportMinAggregateInputType
    _max?: SportMaxAggregateInputType
  }

  export type SportGroupByOutputType = {
    id: string
    name: string
    slug: string
    icon: string
    createdAt: Date
    updatedAt: Date
    _count: SportCountAggregateOutputType | null
    _min: SportMinAggregateOutputType | null
    _max: SportMaxAggregateOutputType | null
  }

  type GetSportGroupByPayload<T extends SportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SportGroupByOutputType[P]>
            : GetScalarType<T[P], SportGroupByOutputType[P]>
        }
      >
    >


  export type SportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    leagues?: boolean | Sport$leaguesArgs<ExtArgs>
    bookmakerLinks?: boolean | Sport$bookmakerLinksArgs<ExtArgs>
    _count?: boolean | SportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sport"]>

  export type SportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sport"]>

  export type SportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sport"]>

  export type SportSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "icon" | "createdAt" | "updatedAt", ExtArgs["result"]["sport"]>
  export type SportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leagues?: boolean | Sport$leaguesArgs<ExtArgs>
    bookmakerLinks?: boolean | Sport$bookmakerLinksArgs<ExtArgs>
    _count?: boolean | SportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sport"
    objects: {
      leagues: Prisma.$LeaguePayload<ExtArgs>[]
      bookmakerLinks: Prisma.$BookmakerSportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      icon: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sport"]>
    composites: {}
  }

  type SportGetPayload<S extends boolean | null | undefined | SportDefaultArgs> = $Result.GetResult<Prisma.$SportPayload, S>

  type SportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SportCountAggregateInputType | true
    }

  export interface SportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sport'], meta: { name: 'Sport' } }
    /**
     * Find zero or one Sport that matches the filter.
     * @param {SportFindUniqueArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SportFindUniqueArgs>(args: SelectSubset<T, SportFindUniqueArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SportFindUniqueOrThrowArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SportFindUniqueOrThrowArgs>(args: SelectSubset<T, SportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindFirstArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SportFindFirstArgs>(args?: SelectSubset<T, SportFindFirstArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindFirstOrThrowArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SportFindFirstOrThrowArgs>(args?: SelectSubset<T, SportFindFirstOrThrowArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sports
     * const sports = await prisma.sport.findMany()
     * 
     * // Get first 10 Sports
     * const sports = await prisma.sport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sportWithIdOnly = await prisma.sport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SportFindManyArgs>(args?: SelectSubset<T, SportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sport.
     * @param {SportCreateArgs} args - Arguments to create a Sport.
     * @example
     * // Create one Sport
     * const Sport = await prisma.sport.create({
     *   data: {
     *     // ... data to create a Sport
     *   }
     * })
     * 
     */
    create<T extends SportCreateArgs>(args: SelectSubset<T, SportCreateArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sports.
     * @param {SportCreateManyArgs} args - Arguments to create many Sports.
     * @example
     * // Create many Sports
     * const sport = await prisma.sport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SportCreateManyArgs>(args?: SelectSubset<T, SportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sports and returns the data saved in the database.
     * @param {SportCreateManyAndReturnArgs} args - Arguments to create many Sports.
     * @example
     * // Create many Sports
     * const sport = await prisma.sport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sports and only return the `id`
     * const sportWithIdOnly = await prisma.sport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SportCreateManyAndReturnArgs>(args?: SelectSubset<T, SportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sport.
     * @param {SportDeleteArgs} args - Arguments to delete one Sport.
     * @example
     * // Delete one Sport
     * const Sport = await prisma.sport.delete({
     *   where: {
     *     // ... filter to delete one Sport
     *   }
     * })
     * 
     */
    delete<T extends SportDeleteArgs>(args: SelectSubset<T, SportDeleteArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sport.
     * @param {SportUpdateArgs} args - Arguments to update one Sport.
     * @example
     * // Update one Sport
     * const sport = await prisma.sport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SportUpdateArgs>(args: SelectSubset<T, SportUpdateArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sports.
     * @param {SportDeleteManyArgs} args - Arguments to filter Sports to delete.
     * @example
     * // Delete a few Sports
     * const { count } = await prisma.sport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SportDeleteManyArgs>(args?: SelectSubset<T, SportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sports
     * const sport = await prisma.sport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SportUpdateManyArgs>(args: SelectSubset<T, SportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sports and returns the data updated in the database.
     * @param {SportUpdateManyAndReturnArgs} args - Arguments to update many Sports.
     * @example
     * // Update many Sports
     * const sport = await prisma.sport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sports and only return the `id`
     * const sportWithIdOnly = await prisma.sport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SportUpdateManyAndReturnArgs>(args: SelectSubset<T, SportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sport.
     * @param {SportUpsertArgs} args - Arguments to update or create a Sport.
     * @example
     * // Update or create a Sport
     * const sport = await prisma.sport.upsert({
     *   create: {
     *     // ... data to create a Sport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sport we want to update
     *   }
     * })
     */
    upsert<T extends SportUpsertArgs>(args: SelectSubset<T, SportUpsertArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportCountArgs} args - Arguments to filter Sports to count.
     * @example
     * // Count the number of Sports
     * const count = await prisma.sport.count({
     *   where: {
     *     // ... the filter for the Sports we want to count
     *   }
     * })
    **/
    count<T extends SportCountArgs>(
      args?: Subset<T, SportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SportAggregateArgs>(args: Subset<T, SportAggregateArgs>): Prisma.PrismaPromise<GetSportAggregateType<T>>

    /**
     * Group by Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SportGroupByArgs['orderBy'] }
        : { orderBy?: SportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sport model
   */
  readonly fields: SportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leagues<T extends Sport$leaguesArgs<ExtArgs> = {}>(args?: Subset<T, Sport$leaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookmakerLinks<T extends Sport$bookmakerLinksArgs<ExtArgs> = {}>(args?: Subset<T, Sport$bookmakerLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sport model
   */
  interface SportFieldRefs {
    readonly id: FieldRef<"Sport", 'String'>
    readonly name: FieldRef<"Sport", 'String'>
    readonly slug: FieldRef<"Sport", 'String'>
    readonly icon: FieldRef<"Sport", 'String'>
    readonly createdAt: FieldRef<"Sport", 'DateTime'>
    readonly updatedAt: FieldRef<"Sport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sport findUnique
   */
  export type SportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where: SportWhereUniqueInput
  }

  /**
   * Sport findUniqueOrThrow
   */
  export type SportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where: SportWhereUniqueInput
  }

  /**
   * Sport findFirst
   */
  export type SportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sports.
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sports.
     */
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }

  /**
   * Sport findFirstOrThrow
   */
  export type SportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sports.
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sports.
     */
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }

  /**
   * Sport findMany
   */
  export type SportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sports to fetch.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sports.
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }

  /**
   * Sport create
   */
  export type SportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * The data needed to create a Sport.
     */
    data: XOR<SportCreateInput, SportUncheckedCreateInput>
  }

  /**
   * Sport createMany
   */
  export type SportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sports.
     */
    data: SportCreateManyInput | SportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sport createManyAndReturn
   */
  export type SportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * The data used to create many Sports.
     */
    data: SportCreateManyInput | SportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sport update
   */
  export type SportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * The data needed to update a Sport.
     */
    data: XOR<SportUpdateInput, SportUncheckedUpdateInput>
    /**
     * Choose, which Sport to update.
     */
    where: SportWhereUniqueInput
  }

  /**
   * Sport updateMany
   */
  export type SportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sports.
     */
    data: XOR<SportUpdateManyMutationInput, SportUncheckedUpdateManyInput>
    /**
     * Filter which Sports to update
     */
    where?: SportWhereInput
    /**
     * Limit how many Sports to update.
     */
    limit?: number
  }

  /**
   * Sport updateManyAndReturn
   */
  export type SportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * The data used to update Sports.
     */
    data: XOR<SportUpdateManyMutationInput, SportUncheckedUpdateManyInput>
    /**
     * Filter which Sports to update
     */
    where?: SportWhereInput
    /**
     * Limit how many Sports to update.
     */
    limit?: number
  }

  /**
   * Sport upsert
   */
  export type SportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * The filter to search for the Sport to update in case it exists.
     */
    where: SportWhereUniqueInput
    /**
     * In case the Sport found by the `where` argument doesn't exist, create a new Sport with this data.
     */
    create: XOR<SportCreateInput, SportUncheckedCreateInput>
    /**
     * In case the Sport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SportUpdateInput, SportUncheckedUpdateInput>
  }

  /**
   * Sport delete
   */
  export type SportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter which Sport to delete.
     */
    where: SportWhereUniqueInput
  }

  /**
   * Sport deleteMany
   */
  export type SportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sports to delete
     */
    where?: SportWhereInput
    /**
     * Limit how many Sports to delete.
     */
    limit?: number
  }

  /**
   * Sport.leagues
   */
  export type Sport$leaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    cursor?: LeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * Sport.bookmakerLinks
   */
  export type Sport$bookmakerLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    where?: BookmakerSportWhereInput
    orderBy?: BookmakerSportOrderByWithRelationInput | BookmakerSportOrderByWithRelationInput[]
    cursor?: BookmakerSportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmakerSportScalarFieldEnum | BookmakerSportScalarFieldEnum[]
  }

  /**
   * Sport without action
   */
  export type SportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sport
     */
    omit?: SportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
  }


  /**
   * Model League
   */

  export type AggregateLeague = {
    _count: LeagueCountAggregateOutputType | null
    _min: LeagueMinAggregateOutputType | null
    _max: LeagueMaxAggregateOutputType | null
  }

  export type LeagueMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    sportId: string | null
    countryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LeagueMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    sportId: string | null
    countryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LeagueCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    sportId: number
    countryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LeagueMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    sportId?: true
    countryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LeagueMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    sportId?: true
    countryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LeagueCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    sportId?: true
    countryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LeagueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which League to aggregate.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leagues
    **/
    _count?: true | LeagueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeagueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeagueMaxAggregateInputType
  }

  export type GetLeagueAggregateType<T extends LeagueAggregateArgs> = {
        [P in keyof T & keyof AggregateLeague]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeague[P]>
      : GetScalarType<T[P], AggregateLeague[P]>
  }




  export type LeagueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithAggregationInput | LeagueOrderByWithAggregationInput[]
    by: LeagueScalarFieldEnum[] | LeagueScalarFieldEnum
    having?: LeagueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeagueCountAggregateInputType | true
    _min?: LeagueMinAggregateInputType
    _max?: LeagueMaxAggregateInputType
  }

  export type LeagueGroupByOutputType = {
    id: string
    name: string
    slug: string
    sportId: string
    countryId: string
    createdAt: Date
    updatedAt: Date
    _count: LeagueCountAggregateOutputType | null
    _min: LeagueMinAggregateOutputType | null
    _max: LeagueMaxAggregateOutputType | null
  }

  type GetLeagueGroupByPayload<T extends LeagueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeagueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeagueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeagueGroupByOutputType[P]>
            : GetScalarType<T[P], LeagueGroupByOutputType[P]>
        }
      >
    >


  export type LeagueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    sportId?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sport?: boolean | SportDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    bookmakerLinks?: boolean | League$bookmakerLinksArgs<ExtArgs>
    _count?: boolean | LeagueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    sportId?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sport?: boolean | SportDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    sportId?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sport?: boolean | SportDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    sportId?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LeagueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "sportId" | "countryId" | "createdAt" | "updatedAt", ExtArgs["result"]["league"]>
  export type LeagueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sport?: boolean | SportDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    bookmakerLinks?: boolean | League$bookmakerLinksArgs<ExtArgs>
    _count?: boolean | LeagueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeagueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sport?: boolean | SportDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }
  export type LeagueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sport?: boolean | SportDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }

  export type $LeaguePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "League"
    objects: {
      sport: Prisma.$SportPayload<ExtArgs>
      country: Prisma.$CountryPayload<ExtArgs>
      bookmakerLinks: Prisma.$BookmakerLeaguePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      sportId: string
      countryId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["league"]>
    composites: {}
  }

  type LeagueGetPayload<S extends boolean | null | undefined | LeagueDefaultArgs> = $Result.GetResult<Prisma.$LeaguePayload, S>

  type LeagueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeagueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeagueCountAggregateInputType | true
    }

  export interface LeagueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['League'], meta: { name: 'League' } }
    /**
     * Find zero or one League that matches the filter.
     * @param {LeagueFindUniqueArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeagueFindUniqueArgs>(args: SelectSubset<T, LeagueFindUniqueArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one League that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeagueFindUniqueOrThrowArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeagueFindUniqueOrThrowArgs>(args: SelectSubset<T, LeagueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first League that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindFirstArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeagueFindFirstArgs>(args?: SelectSubset<T, LeagueFindFirstArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first League that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindFirstOrThrowArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeagueFindFirstOrThrowArgs>(args?: SelectSubset<T, LeagueFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Leagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leagues
     * const leagues = await prisma.league.findMany()
     * 
     * // Get first 10 Leagues
     * const leagues = await prisma.league.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leagueWithIdOnly = await prisma.league.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeagueFindManyArgs>(args?: SelectSubset<T, LeagueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a League.
     * @param {LeagueCreateArgs} args - Arguments to create a League.
     * @example
     * // Create one League
     * const League = await prisma.league.create({
     *   data: {
     *     // ... data to create a League
     *   }
     * })
     * 
     */
    create<T extends LeagueCreateArgs>(args: SelectSubset<T, LeagueCreateArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Leagues.
     * @param {LeagueCreateManyArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const league = await prisma.league.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeagueCreateManyArgs>(args?: SelectSubset<T, LeagueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leagues and returns the data saved in the database.
     * @param {LeagueCreateManyAndReturnArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const league = await prisma.league.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leagues and only return the `id`
     * const leagueWithIdOnly = await prisma.league.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeagueCreateManyAndReturnArgs>(args?: SelectSubset<T, LeagueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a League.
     * @param {LeagueDeleteArgs} args - Arguments to delete one League.
     * @example
     * // Delete one League
     * const League = await prisma.league.delete({
     *   where: {
     *     // ... filter to delete one League
     *   }
     * })
     * 
     */
    delete<T extends LeagueDeleteArgs>(args: SelectSubset<T, LeagueDeleteArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one League.
     * @param {LeagueUpdateArgs} args - Arguments to update one League.
     * @example
     * // Update one League
     * const league = await prisma.league.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeagueUpdateArgs>(args: SelectSubset<T, LeagueUpdateArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Leagues.
     * @param {LeagueDeleteManyArgs} args - Arguments to filter Leagues to delete.
     * @example
     * // Delete a few Leagues
     * const { count } = await prisma.league.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeagueDeleteManyArgs>(args?: SelectSubset<T, LeagueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leagues
     * const league = await prisma.league.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeagueUpdateManyArgs>(args: SelectSubset<T, LeagueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leagues and returns the data updated in the database.
     * @param {LeagueUpdateManyAndReturnArgs} args - Arguments to update many Leagues.
     * @example
     * // Update many Leagues
     * const league = await prisma.league.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Leagues and only return the `id`
     * const leagueWithIdOnly = await prisma.league.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeagueUpdateManyAndReturnArgs>(args: SelectSubset<T, LeagueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one League.
     * @param {LeagueUpsertArgs} args - Arguments to update or create a League.
     * @example
     * // Update or create a League
     * const league = await prisma.league.upsert({
     *   create: {
     *     // ... data to create a League
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the League we want to update
     *   }
     * })
     */
    upsert<T extends LeagueUpsertArgs>(args: SelectSubset<T, LeagueUpsertArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueCountArgs} args - Arguments to filter Leagues to count.
     * @example
     * // Count the number of Leagues
     * const count = await prisma.league.count({
     *   where: {
     *     // ... the filter for the Leagues we want to count
     *   }
     * })
    **/
    count<T extends LeagueCountArgs>(
      args?: Subset<T, LeagueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeagueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a League.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeagueAggregateArgs>(args: Subset<T, LeagueAggregateArgs>): Prisma.PrismaPromise<GetLeagueAggregateType<T>>

    /**
     * Group by League.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeagueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeagueGroupByArgs['orderBy'] }
        : { orderBy?: LeagueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeagueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeagueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the League model
   */
  readonly fields: LeagueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for League.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeagueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sport<T extends SportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SportDefaultArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bookmakerLinks<T extends League$bookmakerLinksArgs<ExtArgs> = {}>(args?: Subset<T, League$bookmakerLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the League model
   */
  interface LeagueFieldRefs {
    readonly id: FieldRef<"League", 'String'>
    readonly name: FieldRef<"League", 'String'>
    readonly slug: FieldRef<"League", 'String'>
    readonly sportId: FieldRef<"League", 'String'>
    readonly countryId: FieldRef<"League", 'String'>
    readonly createdAt: FieldRef<"League", 'DateTime'>
    readonly updatedAt: FieldRef<"League", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * League findUnique
   */
  export type LeagueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League findUniqueOrThrow
   */
  export type LeagueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League findFirst
   */
  export type LeagueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League findFirstOrThrow
   */
  export type LeagueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League findMany
   */
  export type LeagueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which Leagues to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League create
   */
  export type LeagueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The data needed to create a League.
     */
    data: XOR<LeagueCreateInput, LeagueUncheckedCreateInput>
  }

  /**
   * League createMany
   */
  export type LeagueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leagues.
     */
    data: LeagueCreateManyInput | LeagueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * League createManyAndReturn
   */
  export type LeagueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * The data used to create many Leagues.
     */
    data: LeagueCreateManyInput | LeagueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * League update
   */
  export type LeagueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The data needed to update a League.
     */
    data: XOR<LeagueUpdateInput, LeagueUncheckedUpdateInput>
    /**
     * Choose, which League to update.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League updateMany
   */
  export type LeagueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leagues.
     */
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyInput>
    /**
     * Filter which Leagues to update
     */
    where?: LeagueWhereInput
    /**
     * Limit how many Leagues to update.
     */
    limit?: number
  }

  /**
   * League updateManyAndReturn
   */
  export type LeagueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * The data used to update Leagues.
     */
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyInput>
    /**
     * Filter which Leagues to update
     */
    where?: LeagueWhereInput
    /**
     * Limit how many Leagues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * League upsert
   */
  export type LeagueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The filter to search for the League to update in case it exists.
     */
    where: LeagueWhereUniqueInput
    /**
     * In case the League found by the `where` argument doesn't exist, create a new League with this data.
     */
    create: XOR<LeagueCreateInput, LeagueUncheckedCreateInput>
    /**
     * In case the League was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeagueUpdateInput, LeagueUncheckedUpdateInput>
  }

  /**
   * League delete
   */
  export type LeagueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter which League to delete.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League deleteMany
   */
  export type LeagueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leagues to delete
     */
    where?: LeagueWhereInput
    /**
     * Limit how many Leagues to delete.
     */
    limit?: number
  }

  /**
   * League.bookmakerLinks
   */
  export type League$bookmakerLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    where?: BookmakerLeagueWhereInput
    orderBy?: BookmakerLeagueOrderByWithRelationInput | BookmakerLeagueOrderByWithRelationInput[]
    cursor?: BookmakerLeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmakerLeagueScalarFieldEnum | BookmakerLeagueScalarFieldEnum[]
  }

  /**
   * League without action
   */
  export type LeagueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
  }


  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CountryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    icon: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CountryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    id: string
    name: string
    slug: string
    icon: string
    createdAt: Date
    updatedAt: Date
    _count: CountryCountAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    leagues?: boolean | Country$leaguesArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["country"]>

  export type CountrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["country"]>

  export type CountrySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CountryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "icon" | "createdAt" | "updatedAt", ExtArgs["result"]["country"]>
  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leagues?: boolean | Country$leaguesArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CountryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CountryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      leagues: Prisma.$LeaguePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      icon: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["country"]>
    composites: {}
  }

  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CountryFindUniqueArgs>(args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Country that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs>(args: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CountryFindFirstArgs>(args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs>(args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CountryFindManyArgs>(args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
     */
    create<T extends CountryCreateArgs>(args: SelectSubset<T, CountryCreateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Countries.
     * @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CountryCreateManyArgs>(args?: SelectSubset<T, CountryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Countries and returns the data saved in the database.
     * @param {CountryCreateManyAndReturnArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CountryCreateManyAndReturnArgs>(args?: SelectSubset<T, CountryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
     */
    delete<T extends CountryDeleteArgs>(args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CountryUpdateArgs>(args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CountryDeleteManyArgs>(args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CountryUpdateManyArgs>(args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries and returns the data updated in the database.
     * @param {CountryUpdateManyAndReturnArgs} args - Arguments to update many Countries.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CountryUpdateManyAndReturnArgs>(args: SelectSubset<T, CountryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
     */
    upsert<T extends CountryUpsertArgs>(args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leagues<T extends Country$leaguesArgs<ExtArgs> = {}>(args?: Subset<T, Country$leaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Country model
   */
  interface CountryFieldRefs {
    readonly id: FieldRef<"Country", 'String'>
    readonly name: FieldRef<"Country", 'String'>
    readonly slug: FieldRef<"Country", 'String'>
    readonly icon: FieldRef<"Country", 'String'>
    readonly createdAt: FieldRef<"Country", 'DateTime'>
    readonly updatedAt: FieldRef<"Country", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }

  /**
   * Country createMany
   */
  export type CountryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country createManyAndReturn
   */
  export type CountryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to update.
     */
    limit?: number
  }

  /**
   * Country updateManyAndReturn
   */
  export type CountryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to update.
     */
    limit?: number
  }

  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }

  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to delete.
     */
    limit?: number
  }

  /**
   * Country.leagues
   */
  export type Country$leaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    cursor?: LeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
  }


  /**
   * Model BookmakerSport
   */

  export type AggregateBookmakerSport = {
    _count: BookmakerSportCountAggregateOutputType | null
    _min: BookmakerSportMinAggregateOutputType | null
    _max: BookmakerSportMaxAggregateOutputType | null
  }

  export type BookmakerSportMinAggregateOutputType = {
    bookmakerId: string | null
    sportId: string | null
    external_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookmakerSportMaxAggregateOutputType = {
    bookmakerId: string | null
    sportId: string | null
    external_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookmakerSportCountAggregateOutputType = {
    bookmakerId: number
    sportId: number
    external_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookmakerSportMinAggregateInputType = {
    bookmakerId?: true
    sportId?: true
    external_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookmakerSportMaxAggregateInputType = {
    bookmakerId?: true
    sportId?: true
    external_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookmakerSportCountAggregateInputType = {
    bookmakerId?: true
    sportId?: true
    external_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookmakerSportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookmakerSport to aggregate.
     */
    where?: BookmakerSportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmakerSports to fetch.
     */
    orderBy?: BookmakerSportOrderByWithRelationInput | BookmakerSportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookmakerSportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmakerSports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmakerSports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookmakerSports
    **/
    _count?: true | BookmakerSportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmakerSportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmakerSportMaxAggregateInputType
  }

  export type GetBookmakerSportAggregateType<T extends BookmakerSportAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmakerSport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmakerSport[P]>
      : GetScalarType<T[P], AggregateBookmakerSport[P]>
  }




  export type BookmakerSportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmakerSportWhereInput
    orderBy?: BookmakerSportOrderByWithAggregationInput | BookmakerSportOrderByWithAggregationInput[]
    by: BookmakerSportScalarFieldEnum[] | BookmakerSportScalarFieldEnum
    having?: BookmakerSportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmakerSportCountAggregateInputType | true
    _min?: BookmakerSportMinAggregateInputType
    _max?: BookmakerSportMaxAggregateInputType
  }

  export type BookmakerSportGroupByOutputType = {
    bookmakerId: string
    sportId: string
    external_id: string
    createdAt: Date
    updatedAt: Date
    _count: BookmakerSportCountAggregateOutputType | null
    _min: BookmakerSportMinAggregateOutputType | null
    _max: BookmakerSportMaxAggregateOutputType | null
  }

  type GetBookmakerSportGroupByPayload<T extends BookmakerSportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmakerSportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmakerSportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmakerSportGroupByOutputType[P]>
            : GetScalarType<T[P], BookmakerSportGroupByOutputType[P]>
        }
      >
    >


  export type BookmakerSportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    bookmakerId?: boolean
    sportId?: boolean
    external_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    sport?: boolean | SportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmakerSport"]>

  export type BookmakerSportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    bookmakerId?: boolean
    sportId?: boolean
    external_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    sport?: boolean | SportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmakerSport"]>

  export type BookmakerSportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    bookmakerId?: boolean
    sportId?: boolean
    external_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    sport?: boolean | SportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmakerSport"]>

  export type BookmakerSportSelectScalar = {
    bookmakerId?: boolean
    sportId?: boolean
    external_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookmakerSportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"bookmakerId" | "sportId" | "external_id" | "createdAt" | "updatedAt", ExtArgs["result"]["bookmakerSport"]>
  export type BookmakerSportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    sport?: boolean | SportDefaultArgs<ExtArgs>
  }
  export type BookmakerSportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    sport?: boolean | SportDefaultArgs<ExtArgs>
  }
  export type BookmakerSportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    sport?: boolean | SportDefaultArgs<ExtArgs>
  }

  export type $BookmakerSportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookmakerSport"
    objects: {
      bookmaker: Prisma.$BookmakerPayload<ExtArgs>
      sport: Prisma.$SportPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      bookmakerId: string
      sportId: string
      external_id: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bookmakerSport"]>
    composites: {}
  }

  type BookmakerSportGetPayload<S extends boolean | null | undefined | BookmakerSportDefaultArgs> = $Result.GetResult<Prisma.$BookmakerSportPayload, S>

  type BookmakerSportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookmakerSportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookmakerSportCountAggregateInputType | true
    }

  export interface BookmakerSportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookmakerSport'], meta: { name: 'BookmakerSport' } }
    /**
     * Find zero or one BookmakerSport that matches the filter.
     * @param {BookmakerSportFindUniqueArgs} args - Arguments to find a BookmakerSport
     * @example
     * // Get one BookmakerSport
     * const bookmakerSport = await prisma.bookmakerSport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookmakerSportFindUniqueArgs>(args: SelectSubset<T, BookmakerSportFindUniqueArgs<ExtArgs>>): Prisma__BookmakerSportClient<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookmakerSport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookmakerSportFindUniqueOrThrowArgs} args - Arguments to find a BookmakerSport
     * @example
     * // Get one BookmakerSport
     * const bookmakerSport = await prisma.bookmakerSport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookmakerSportFindUniqueOrThrowArgs>(args: SelectSubset<T, BookmakerSportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookmakerSportClient<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookmakerSport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerSportFindFirstArgs} args - Arguments to find a BookmakerSport
     * @example
     * // Get one BookmakerSport
     * const bookmakerSport = await prisma.bookmakerSport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookmakerSportFindFirstArgs>(args?: SelectSubset<T, BookmakerSportFindFirstArgs<ExtArgs>>): Prisma__BookmakerSportClient<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookmakerSport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerSportFindFirstOrThrowArgs} args - Arguments to find a BookmakerSport
     * @example
     * // Get one BookmakerSport
     * const bookmakerSport = await prisma.bookmakerSport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookmakerSportFindFirstOrThrowArgs>(args?: SelectSubset<T, BookmakerSportFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookmakerSportClient<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookmakerSports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerSportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookmakerSports
     * const bookmakerSports = await prisma.bookmakerSport.findMany()
     * 
     * // Get first 10 BookmakerSports
     * const bookmakerSports = await prisma.bookmakerSport.findMany({ take: 10 })
     * 
     * // Only select the `bookmakerId`
     * const bookmakerSportWithBookmakerIdOnly = await prisma.bookmakerSport.findMany({ select: { bookmakerId: true } })
     * 
     */
    findMany<T extends BookmakerSportFindManyArgs>(args?: SelectSubset<T, BookmakerSportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookmakerSport.
     * @param {BookmakerSportCreateArgs} args - Arguments to create a BookmakerSport.
     * @example
     * // Create one BookmakerSport
     * const BookmakerSport = await prisma.bookmakerSport.create({
     *   data: {
     *     // ... data to create a BookmakerSport
     *   }
     * })
     * 
     */
    create<T extends BookmakerSportCreateArgs>(args: SelectSubset<T, BookmakerSportCreateArgs<ExtArgs>>): Prisma__BookmakerSportClient<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookmakerSports.
     * @param {BookmakerSportCreateManyArgs} args - Arguments to create many BookmakerSports.
     * @example
     * // Create many BookmakerSports
     * const bookmakerSport = await prisma.bookmakerSport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookmakerSportCreateManyArgs>(args?: SelectSubset<T, BookmakerSportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookmakerSports and returns the data saved in the database.
     * @param {BookmakerSportCreateManyAndReturnArgs} args - Arguments to create many BookmakerSports.
     * @example
     * // Create many BookmakerSports
     * const bookmakerSport = await prisma.bookmakerSport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookmakerSports and only return the `bookmakerId`
     * const bookmakerSportWithBookmakerIdOnly = await prisma.bookmakerSport.createManyAndReturn({
     *   select: { bookmakerId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookmakerSportCreateManyAndReturnArgs>(args?: SelectSubset<T, BookmakerSportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BookmakerSport.
     * @param {BookmakerSportDeleteArgs} args - Arguments to delete one BookmakerSport.
     * @example
     * // Delete one BookmakerSport
     * const BookmakerSport = await prisma.bookmakerSport.delete({
     *   where: {
     *     // ... filter to delete one BookmakerSport
     *   }
     * })
     * 
     */
    delete<T extends BookmakerSportDeleteArgs>(args: SelectSubset<T, BookmakerSportDeleteArgs<ExtArgs>>): Prisma__BookmakerSportClient<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookmakerSport.
     * @param {BookmakerSportUpdateArgs} args - Arguments to update one BookmakerSport.
     * @example
     * // Update one BookmakerSport
     * const bookmakerSport = await prisma.bookmakerSport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookmakerSportUpdateArgs>(args: SelectSubset<T, BookmakerSportUpdateArgs<ExtArgs>>): Prisma__BookmakerSportClient<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookmakerSports.
     * @param {BookmakerSportDeleteManyArgs} args - Arguments to filter BookmakerSports to delete.
     * @example
     * // Delete a few BookmakerSports
     * const { count } = await prisma.bookmakerSport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookmakerSportDeleteManyArgs>(args?: SelectSubset<T, BookmakerSportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookmakerSports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerSportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookmakerSports
     * const bookmakerSport = await prisma.bookmakerSport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookmakerSportUpdateManyArgs>(args: SelectSubset<T, BookmakerSportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookmakerSports and returns the data updated in the database.
     * @param {BookmakerSportUpdateManyAndReturnArgs} args - Arguments to update many BookmakerSports.
     * @example
     * // Update many BookmakerSports
     * const bookmakerSport = await prisma.bookmakerSport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BookmakerSports and only return the `bookmakerId`
     * const bookmakerSportWithBookmakerIdOnly = await prisma.bookmakerSport.updateManyAndReturn({
     *   select: { bookmakerId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookmakerSportUpdateManyAndReturnArgs>(args: SelectSubset<T, BookmakerSportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BookmakerSport.
     * @param {BookmakerSportUpsertArgs} args - Arguments to update or create a BookmakerSport.
     * @example
     * // Update or create a BookmakerSport
     * const bookmakerSport = await prisma.bookmakerSport.upsert({
     *   create: {
     *     // ... data to create a BookmakerSport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookmakerSport we want to update
     *   }
     * })
     */
    upsert<T extends BookmakerSportUpsertArgs>(args: SelectSubset<T, BookmakerSportUpsertArgs<ExtArgs>>): Prisma__BookmakerSportClient<$Result.GetResult<Prisma.$BookmakerSportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BookmakerSports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerSportCountArgs} args - Arguments to filter BookmakerSports to count.
     * @example
     * // Count the number of BookmakerSports
     * const count = await prisma.bookmakerSport.count({
     *   where: {
     *     // ... the filter for the BookmakerSports we want to count
     *   }
     * })
    **/
    count<T extends BookmakerSportCountArgs>(
      args?: Subset<T, BookmakerSportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmakerSportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookmakerSport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerSportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmakerSportAggregateArgs>(args: Subset<T, BookmakerSportAggregateArgs>): Prisma.PrismaPromise<GetBookmakerSportAggregateType<T>>

    /**
     * Group by BookmakerSport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerSportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookmakerSportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookmakerSportGroupByArgs['orderBy'] }
        : { orderBy?: BookmakerSportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookmakerSportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmakerSportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookmakerSport model
   */
  readonly fields: BookmakerSportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookmakerSport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookmakerSportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bookmaker<T extends BookmakerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookmakerDefaultArgs<ExtArgs>>): Prisma__BookmakerClient<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sport<T extends SportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SportDefaultArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookmakerSport model
   */
  interface BookmakerSportFieldRefs {
    readonly bookmakerId: FieldRef<"BookmakerSport", 'String'>
    readonly sportId: FieldRef<"BookmakerSport", 'String'>
    readonly external_id: FieldRef<"BookmakerSport", 'String'>
    readonly createdAt: FieldRef<"BookmakerSport", 'DateTime'>
    readonly updatedAt: FieldRef<"BookmakerSport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookmakerSport findUnique
   */
  export type BookmakerSportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    /**
     * Filter, which BookmakerSport to fetch.
     */
    where: BookmakerSportWhereUniqueInput
  }

  /**
   * BookmakerSport findUniqueOrThrow
   */
  export type BookmakerSportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    /**
     * Filter, which BookmakerSport to fetch.
     */
    where: BookmakerSportWhereUniqueInput
  }

  /**
   * BookmakerSport findFirst
   */
  export type BookmakerSportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    /**
     * Filter, which BookmakerSport to fetch.
     */
    where?: BookmakerSportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmakerSports to fetch.
     */
    orderBy?: BookmakerSportOrderByWithRelationInput | BookmakerSportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookmakerSports.
     */
    cursor?: BookmakerSportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmakerSports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmakerSports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookmakerSports.
     */
    distinct?: BookmakerSportScalarFieldEnum | BookmakerSportScalarFieldEnum[]
  }

  /**
   * BookmakerSport findFirstOrThrow
   */
  export type BookmakerSportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    /**
     * Filter, which BookmakerSport to fetch.
     */
    where?: BookmakerSportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmakerSports to fetch.
     */
    orderBy?: BookmakerSportOrderByWithRelationInput | BookmakerSportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookmakerSports.
     */
    cursor?: BookmakerSportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmakerSports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmakerSports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookmakerSports.
     */
    distinct?: BookmakerSportScalarFieldEnum | BookmakerSportScalarFieldEnum[]
  }

  /**
   * BookmakerSport findMany
   */
  export type BookmakerSportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    /**
     * Filter, which BookmakerSports to fetch.
     */
    where?: BookmakerSportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmakerSports to fetch.
     */
    orderBy?: BookmakerSportOrderByWithRelationInput | BookmakerSportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookmakerSports.
     */
    cursor?: BookmakerSportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmakerSports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmakerSports.
     */
    skip?: number
    distinct?: BookmakerSportScalarFieldEnum | BookmakerSportScalarFieldEnum[]
  }

  /**
   * BookmakerSport create
   */
  export type BookmakerSportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    /**
     * The data needed to create a BookmakerSport.
     */
    data: XOR<BookmakerSportCreateInput, BookmakerSportUncheckedCreateInput>
  }

  /**
   * BookmakerSport createMany
   */
  export type BookmakerSportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookmakerSports.
     */
    data: BookmakerSportCreateManyInput | BookmakerSportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookmakerSport createManyAndReturn
   */
  export type BookmakerSportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * The data used to create many BookmakerSports.
     */
    data: BookmakerSportCreateManyInput | BookmakerSportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookmakerSport update
   */
  export type BookmakerSportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    /**
     * The data needed to update a BookmakerSport.
     */
    data: XOR<BookmakerSportUpdateInput, BookmakerSportUncheckedUpdateInput>
    /**
     * Choose, which BookmakerSport to update.
     */
    where: BookmakerSportWhereUniqueInput
  }

  /**
   * BookmakerSport updateMany
   */
  export type BookmakerSportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookmakerSports.
     */
    data: XOR<BookmakerSportUpdateManyMutationInput, BookmakerSportUncheckedUpdateManyInput>
    /**
     * Filter which BookmakerSports to update
     */
    where?: BookmakerSportWhereInput
    /**
     * Limit how many BookmakerSports to update.
     */
    limit?: number
  }

  /**
   * BookmakerSport updateManyAndReturn
   */
  export type BookmakerSportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * The data used to update BookmakerSports.
     */
    data: XOR<BookmakerSportUpdateManyMutationInput, BookmakerSportUncheckedUpdateManyInput>
    /**
     * Filter which BookmakerSports to update
     */
    where?: BookmakerSportWhereInput
    /**
     * Limit how many BookmakerSports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookmakerSport upsert
   */
  export type BookmakerSportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    /**
     * The filter to search for the BookmakerSport to update in case it exists.
     */
    where: BookmakerSportWhereUniqueInput
    /**
     * In case the BookmakerSport found by the `where` argument doesn't exist, create a new BookmakerSport with this data.
     */
    create: XOR<BookmakerSportCreateInput, BookmakerSportUncheckedCreateInput>
    /**
     * In case the BookmakerSport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookmakerSportUpdateInput, BookmakerSportUncheckedUpdateInput>
  }

  /**
   * BookmakerSport delete
   */
  export type BookmakerSportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
    /**
     * Filter which BookmakerSport to delete.
     */
    where: BookmakerSportWhereUniqueInput
  }

  /**
   * BookmakerSport deleteMany
   */
  export type BookmakerSportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookmakerSports to delete
     */
    where?: BookmakerSportWhereInput
    /**
     * Limit how many BookmakerSports to delete.
     */
    limit?: number
  }

  /**
   * BookmakerSport without action
   */
  export type BookmakerSportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerSport
     */
    select?: BookmakerSportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerSport
     */
    omit?: BookmakerSportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerSportInclude<ExtArgs> | null
  }


  /**
   * Model BookmakerLeague
   */

  export type AggregateBookmakerLeague = {
    _count: BookmakerLeagueCountAggregateOutputType | null
    _min: BookmakerLeagueMinAggregateOutputType | null
    _max: BookmakerLeagueMaxAggregateOutputType | null
  }

  export type BookmakerLeagueMinAggregateOutputType = {
    bookmakerId: string | null
    leagueId: string | null
    external_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookmakerLeagueMaxAggregateOutputType = {
    bookmakerId: string | null
    leagueId: string | null
    external_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookmakerLeagueCountAggregateOutputType = {
    bookmakerId: number
    leagueId: number
    external_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookmakerLeagueMinAggregateInputType = {
    bookmakerId?: true
    leagueId?: true
    external_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookmakerLeagueMaxAggregateInputType = {
    bookmakerId?: true
    leagueId?: true
    external_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookmakerLeagueCountAggregateInputType = {
    bookmakerId?: true
    leagueId?: true
    external_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookmakerLeagueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookmakerLeague to aggregate.
     */
    where?: BookmakerLeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmakerLeagues to fetch.
     */
    orderBy?: BookmakerLeagueOrderByWithRelationInput | BookmakerLeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookmakerLeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmakerLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmakerLeagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookmakerLeagues
    **/
    _count?: true | BookmakerLeagueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmakerLeagueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmakerLeagueMaxAggregateInputType
  }

  export type GetBookmakerLeagueAggregateType<T extends BookmakerLeagueAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmakerLeague]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmakerLeague[P]>
      : GetScalarType<T[P], AggregateBookmakerLeague[P]>
  }




  export type BookmakerLeagueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmakerLeagueWhereInput
    orderBy?: BookmakerLeagueOrderByWithAggregationInput | BookmakerLeagueOrderByWithAggregationInput[]
    by: BookmakerLeagueScalarFieldEnum[] | BookmakerLeagueScalarFieldEnum
    having?: BookmakerLeagueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmakerLeagueCountAggregateInputType | true
    _min?: BookmakerLeagueMinAggregateInputType
    _max?: BookmakerLeagueMaxAggregateInputType
  }

  export type BookmakerLeagueGroupByOutputType = {
    bookmakerId: string
    leagueId: string
    external_id: string
    createdAt: Date
    updatedAt: Date
    _count: BookmakerLeagueCountAggregateOutputType | null
    _min: BookmakerLeagueMinAggregateOutputType | null
    _max: BookmakerLeagueMaxAggregateOutputType | null
  }

  type GetBookmakerLeagueGroupByPayload<T extends BookmakerLeagueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmakerLeagueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmakerLeagueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmakerLeagueGroupByOutputType[P]>
            : GetScalarType<T[P], BookmakerLeagueGroupByOutputType[P]>
        }
      >
    >


  export type BookmakerLeagueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    bookmakerId?: boolean
    leagueId?: boolean
    external_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmakerLeague"]>

  export type BookmakerLeagueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    bookmakerId?: boolean
    leagueId?: boolean
    external_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmakerLeague"]>

  export type BookmakerLeagueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    bookmakerId?: boolean
    leagueId?: boolean
    external_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmakerLeague"]>

  export type BookmakerLeagueSelectScalar = {
    bookmakerId?: boolean
    leagueId?: boolean
    external_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookmakerLeagueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"bookmakerId" | "leagueId" | "external_id" | "createdAt" | "updatedAt", ExtArgs["result"]["bookmakerLeague"]>
  export type BookmakerLeagueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }
  export type BookmakerLeagueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }
  export type BookmakerLeagueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmaker?: boolean | BookmakerDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }

  export type $BookmakerLeaguePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookmakerLeague"
    objects: {
      bookmaker: Prisma.$BookmakerPayload<ExtArgs>
      league: Prisma.$LeaguePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      bookmakerId: string
      leagueId: string
      external_id: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bookmakerLeague"]>
    composites: {}
  }

  type BookmakerLeagueGetPayload<S extends boolean | null | undefined | BookmakerLeagueDefaultArgs> = $Result.GetResult<Prisma.$BookmakerLeaguePayload, S>

  type BookmakerLeagueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookmakerLeagueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookmakerLeagueCountAggregateInputType | true
    }

  export interface BookmakerLeagueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookmakerLeague'], meta: { name: 'BookmakerLeague' } }
    /**
     * Find zero or one BookmakerLeague that matches the filter.
     * @param {BookmakerLeagueFindUniqueArgs} args - Arguments to find a BookmakerLeague
     * @example
     * // Get one BookmakerLeague
     * const bookmakerLeague = await prisma.bookmakerLeague.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookmakerLeagueFindUniqueArgs>(args: SelectSubset<T, BookmakerLeagueFindUniqueArgs<ExtArgs>>): Prisma__BookmakerLeagueClient<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookmakerLeague that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookmakerLeagueFindUniqueOrThrowArgs} args - Arguments to find a BookmakerLeague
     * @example
     * // Get one BookmakerLeague
     * const bookmakerLeague = await prisma.bookmakerLeague.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookmakerLeagueFindUniqueOrThrowArgs>(args: SelectSubset<T, BookmakerLeagueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookmakerLeagueClient<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookmakerLeague that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerLeagueFindFirstArgs} args - Arguments to find a BookmakerLeague
     * @example
     * // Get one BookmakerLeague
     * const bookmakerLeague = await prisma.bookmakerLeague.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookmakerLeagueFindFirstArgs>(args?: SelectSubset<T, BookmakerLeagueFindFirstArgs<ExtArgs>>): Prisma__BookmakerLeagueClient<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookmakerLeague that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerLeagueFindFirstOrThrowArgs} args - Arguments to find a BookmakerLeague
     * @example
     * // Get one BookmakerLeague
     * const bookmakerLeague = await prisma.bookmakerLeague.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookmakerLeagueFindFirstOrThrowArgs>(args?: SelectSubset<T, BookmakerLeagueFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookmakerLeagueClient<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookmakerLeagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerLeagueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookmakerLeagues
     * const bookmakerLeagues = await prisma.bookmakerLeague.findMany()
     * 
     * // Get first 10 BookmakerLeagues
     * const bookmakerLeagues = await prisma.bookmakerLeague.findMany({ take: 10 })
     * 
     * // Only select the `bookmakerId`
     * const bookmakerLeagueWithBookmakerIdOnly = await prisma.bookmakerLeague.findMany({ select: { bookmakerId: true } })
     * 
     */
    findMany<T extends BookmakerLeagueFindManyArgs>(args?: SelectSubset<T, BookmakerLeagueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookmakerLeague.
     * @param {BookmakerLeagueCreateArgs} args - Arguments to create a BookmakerLeague.
     * @example
     * // Create one BookmakerLeague
     * const BookmakerLeague = await prisma.bookmakerLeague.create({
     *   data: {
     *     // ... data to create a BookmakerLeague
     *   }
     * })
     * 
     */
    create<T extends BookmakerLeagueCreateArgs>(args: SelectSubset<T, BookmakerLeagueCreateArgs<ExtArgs>>): Prisma__BookmakerLeagueClient<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookmakerLeagues.
     * @param {BookmakerLeagueCreateManyArgs} args - Arguments to create many BookmakerLeagues.
     * @example
     * // Create many BookmakerLeagues
     * const bookmakerLeague = await prisma.bookmakerLeague.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookmakerLeagueCreateManyArgs>(args?: SelectSubset<T, BookmakerLeagueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookmakerLeagues and returns the data saved in the database.
     * @param {BookmakerLeagueCreateManyAndReturnArgs} args - Arguments to create many BookmakerLeagues.
     * @example
     * // Create many BookmakerLeagues
     * const bookmakerLeague = await prisma.bookmakerLeague.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookmakerLeagues and only return the `bookmakerId`
     * const bookmakerLeagueWithBookmakerIdOnly = await prisma.bookmakerLeague.createManyAndReturn({
     *   select: { bookmakerId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookmakerLeagueCreateManyAndReturnArgs>(args?: SelectSubset<T, BookmakerLeagueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BookmakerLeague.
     * @param {BookmakerLeagueDeleteArgs} args - Arguments to delete one BookmakerLeague.
     * @example
     * // Delete one BookmakerLeague
     * const BookmakerLeague = await prisma.bookmakerLeague.delete({
     *   where: {
     *     // ... filter to delete one BookmakerLeague
     *   }
     * })
     * 
     */
    delete<T extends BookmakerLeagueDeleteArgs>(args: SelectSubset<T, BookmakerLeagueDeleteArgs<ExtArgs>>): Prisma__BookmakerLeagueClient<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookmakerLeague.
     * @param {BookmakerLeagueUpdateArgs} args - Arguments to update one BookmakerLeague.
     * @example
     * // Update one BookmakerLeague
     * const bookmakerLeague = await prisma.bookmakerLeague.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookmakerLeagueUpdateArgs>(args: SelectSubset<T, BookmakerLeagueUpdateArgs<ExtArgs>>): Prisma__BookmakerLeagueClient<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookmakerLeagues.
     * @param {BookmakerLeagueDeleteManyArgs} args - Arguments to filter BookmakerLeagues to delete.
     * @example
     * // Delete a few BookmakerLeagues
     * const { count } = await prisma.bookmakerLeague.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookmakerLeagueDeleteManyArgs>(args?: SelectSubset<T, BookmakerLeagueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookmakerLeagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerLeagueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookmakerLeagues
     * const bookmakerLeague = await prisma.bookmakerLeague.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookmakerLeagueUpdateManyArgs>(args: SelectSubset<T, BookmakerLeagueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookmakerLeagues and returns the data updated in the database.
     * @param {BookmakerLeagueUpdateManyAndReturnArgs} args - Arguments to update many BookmakerLeagues.
     * @example
     * // Update many BookmakerLeagues
     * const bookmakerLeague = await prisma.bookmakerLeague.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BookmakerLeagues and only return the `bookmakerId`
     * const bookmakerLeagueWithBookmakerIdOnly = await prisma.bookmakerLeague.updateManyAndReturn({
     *   select: { bookmakerId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookmakerLeagueUpdateManyAndReturnArgs>(args: SelectSubset<T, BookmakerLeagueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BookmakerLeague.
     * @param {BookmakerLeagueUpsertArgs} args - Arguments to update or create a BookmakerLeague.
     * @example
     * // Update or create a BookmakerLeague
     * const bookmakerLeague = await prisma.bookmakerLeague.upsert({
     *   create: {
     *     // ... data to create a BookmakerLeague
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookmakerLeague we want to update
     *   }
     * })
     */
    upsert<T extends BookmakerLeagueUpsertArgs>(args: SelectSubset<T, BookmakerLeagueUpsertArgs<ExtArgs>>): Prisma__BookmakerLeagueClient<$Result.GetResult<Prisma.$BookmakerLeaguePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BookmakerLeagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerLeagueCountArgs} args - Arguments to filter BookmakerLeagues to count.
     * @example
     * // Count the number of BookmakerLeagues
     * const count = await prisma.bookmakerLeague.count({
     *   where: {
     *     // ... the filter for the BookmakerLeagues we want to count
     *   }
     * })
    **/
    count<T extends BookmakerLeagueCountArgs>(
      args?: Subset<T, BookmakerLeagueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmakerLeagueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookmakerLeague.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerLeagueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmakerLeagueAggregateArgs>(args: Subset<T, BookmakerLeagueAggregateArgs>): Prisma.PrismaPromise<GetBookmakerLeagueAggregateType<T>>

    /**
     * Group by BookmakerLeague.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmakerLeagueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookmakerLeagueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookmakerLeagueGroupByArgs['orderBy'] }
        : { orderBy?: BookmakerLeagueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookmakerLeagueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmakerLeagueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookmakerLeague model
   */
  readonly fields: BookmakerLeagueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookmakerLeague.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookmakerLeagueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bookmaker<T extends BookmakerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookmakerDefaultArgs<ExtArgs>>): Prisma__BookmakerClient<$Result.GetResult<Prisma.$BookmakerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    league<T extends LeagueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeagueDefaultArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookmakerLeague model
   */
  interface BookmakerLeagueFieldRefs {
    readonly bookmakerId: FieldRef<"BookmakerLeague", 'String'>
    readonly leagueId: FieldRef<"BookmakerLeague", 'String'>
    readonly external_id: FieldRef<"BookmakerLeague", 'String'>
    readonly createdAt: FieldRef<"BookmakerLeague", 'DateTime'>
    readonly updatedAt: FieldRef<"BookmakerLeague", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookmakerLeague findUnique
   */
  export type BookmakerLeagueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    /**
     * Filter, which BookmakerLeague to fetch.
     */
    where: BookmakerLeagueWhereUniqueInput
  }

  /**
   * BookmakerLeague findUniqueOrThrow
   */
  export type BookmakerLeagueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    /**
     * Filter, which BookmakerLeague to fetch.
     */
    where: BookmakerLeagueWhereUniqueInput
  }

  /**
   * BookmakerLeague findFirst
   */
  export type BookmakerLeagueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    /**
     * Filter, which BookmakerLeague to fetch.
     */
    where?: BookmakerLeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmakerLeagues to fetch.
     */
    orderBy?: BookmakerLeagueOrderByWithRelationInput | BookmakerLeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookmakerLeagues.
     */
    cursor?: BookmakerLeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmakerLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmakerLeagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookmakerLeagues.
     */
    distinct?: BookmakerLeagueScalarFieldEnum | BookmakerLeagueScalarFieldEnum[]
  }

  /**
   * BookmakerLeague findFirstOrThrow
   */
  export type BookmakerLeagueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    /**
     * Filter, which BookmakerLeague to fetch.
     */
    where?: BookmakerLeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmakerLeagues to fetch.
     */
    orderBy?: BookmakerLeagueOrderByWithRelationInput | BookmakerLeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookmakerLeagues.
     */
    cursor?: BookmakerLeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmakerLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmakerLeagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookmakerLeagues.
     */
    distinct?: BookmakerLeagueScalarFieldEnum | BookmakerLeagueScalarFieldEnum[]
  }

  /**
   * BookmakerLeague findMany
   */
  export type BookmakerLeagueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    /**
     * Filter, which BookmakerLeagues to fetch.
     */
    where?: BookmakerLeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmakerLeagues to fetch.
     */
    orderBy?: BookmakerLeagueOrderByWithRelationInput | BookmakerLeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookmakerLeagues.
     */
    cursor?: BookmakerLeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmakerLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmakerLeagues.
     */
    skip?: number
    distinct?: BookmakerLeagueScalarFieldEnum | BookmakerLeagueScalarFieldEnum[]
  }

  /**
   * BookmakerLeague create
   */
  export type BookmakerLeagueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    /**
     * The data needed to create a BookmakerLeague.
     */
    data: XOR<BookmakerLeagueCreateInput, BookmakerLeagueUncheckedCreateInput>
  }

  /**
   * BookmakerLeague createMany
   */
  export type BookmakerLeagueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookmakerLeagues.
     */
    data: BookmakerLeagueCreateManyInput | BookmakerLeagueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookmakerLeague createManyAndReturn
   */
  export type BookmakerLeagueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * The data used to create many BookmakerLeagues.
     */
    data: BookmakerLeagueCreateManyInput | BookmakerLeagueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookmakerLeague update
   */
  export type BookmakerLeagueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    /**
     * The data needed to update a BookmakerLeague.
     */
    data: XOR<BookmakerLeagueUpdateInput, BookmakerLeagueUncheckedUpdateInput>
    /**
     * Choose, which BookmakerLeague to update.
     */
    where: BookmakerLeagueWhereUniqueInput
  }

  /**
   * BookmakerLeague updateMany
   */
  export type BookmakerLeagueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookmakerLeagues.
     */
    data: XOR<BookmakerLeagueUpdateManyMutationInput, BookmakerLeagueUncheckedUpdateManyInput>
    /**
     * Filter which BookmakerLeagues to update
     */
    where?: BookmakerLeagueWhereInput
    /**
     * Limit how many BookmakerLeagues to update.
     */
    limit?: number
  }

  /**
   * BookmakerLeague updateManyAndReturn
   */
  export type BookmakerLeagueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * The data used to update BookmakerLeagues.
     */
    data: XOR<BookmakerLeagueUpdateManyMutationInput, BookmakerLeagueUncheckedUpdateManyInput>
    /**
     * Filter which BookmakerLeagues to update
     */
    where?: BookmakerLeagueWhereInput
    /**
     * Limit how many BookmakerLeagues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookmakerLeague upsert
   */
  export type BookmakerLeagueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    /**
     * The filter to search for the BookmakerLeague to update in case it exists.
     */
    where: BookmakerLeagueWhereUniqueInput
    /**
     * In case the BookmakerLeague found by the `where` argument doesn't exist, create a new BookmakerLeague with this data.
     */
    create: XOR<BookmakerLeagueCreateInput, BookmakerLeagueUncheckedCreateInput>
    /**
     * In case the BookmakerLeague was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookmakerLeagueUpdateInput, BookmakerLeagueUncheckedUpdateInput>
  }

  /**
   * BookmakerLeague delete
   */
  export type BookmakerLeagueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
    /**
     * Filter which BookmakerLeague to delete.
     */
    where: BookmakerLeagueWhereUniqueInput
  }

  /**
   * BookmakerLeague deleteMany
   */
  export type BookmakerLeagueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookmakerLeagues to delete
     */
    where?: BookmakerLeagueWhereInput
    /**
     * Limit how many BookmakerLeagues to delete.
     */
    limit?: number
  }

  /**
   * BookmakerLeague without action
   */
  export type BookmakerLeagueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmakerLeague
     */
    select?: BookmakerLeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmakerLeague
     */
    omit?: BookmakerLeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmakerLeagueInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BookmakerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookmakerScalarFieldEnum = (typeof BookmakerScalarFieldEnum)[keyof typeof BookmakerScalarFieldEnum]


  export const SportScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    icon: 'icon',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SportScalarFieldEnum = (typeof SportScalarFieldEnum)[keyof typeof SportScalarFieldEnum]


  export const LeagueScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    sportId: 'sportId',
    countryId: 'countryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LeagueScalarFieldEnum = (typeof LeagueScalarFieldEnum)[keyof typeof LeagueScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    icon: 'icon',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const BookmakerSportScalarFieldEnum: {
    bookmakerId: 'bookmakerId',
    sportId: 'sportId',
    external_id: 'external_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookmakerSportScalarFieldEnum = (typeof BookmakerSportScalarFieldEnum)[keyof typeof BookmakerSportScalarFieldEnum]


  export const BookmakerLeagueScalarFieldEnum: {
    bookmakerId: 'bookmakerId',
    leagueId: 'leagueId',
    external_id: 'external_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookmakerLeagueScalarFieldEnum = (typeof BookmakerLeagueScalarFieldEnum)[keyof typeof BookmakerLeagueScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type BookmakerWhereInput = {
    AND?: BookmakerWhereInput | BookmakerWhereInput[]
    OR?: BookmakerWhereInput[]
    NOT?: BookmakerWhereInput | BookmakerWhereInput[]
    id?: StringFilter<"Bookmaker"> | string
    name?: StringFilter<"Bookmaker"> | string
    slug?: StringFilter<"Bookmaker"> | string
    createdAt?: DateTimeFilter<"Bookmaker"> | Date | string
    updatedAt?: DateTimeFilter<"Bookmaker"> | Date | string
    leagueLinks?: BookmakerLeagueListRelationFilter
    sportLinks?: BookmakerSportListRelationFilter
  }

  export type BookmakerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    leagueLinks?: BookmakerLeagueOrderByRelationAggregateInput
    sportLinks?: BookmakerSportOrderByRelationAggregateInput
  }

  export type BookmakerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    AND?: BookmakerWhereInput | BookmakerWhereInput[]
    OR?: BookmakerWhereInput[]
    NOT?: BookmakerWhereInput | BookmakerWhereInput[]
    createdAt?: DateTimeFilter<"Bookmaker"> | Date | string
    updatedAt?: DateTimeFilter<"Bookmaker"> | Date | string
    leagueLinks?: BookmakerLeagueListRelationFilter
    sportLinks?: BookmakerSportListRelationFilter
  }, "id" | "name" | "slug">

  export type BookmakerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookmakerCountOrderByAggregateInput
    _max?: BookmakerMaxOrderByAggregateInput
    _min?: BookmakerMinOrderByAggregateInput
  }

  export type BookmakerScalarWhereWithAggregatesInput = {
    AND?: BookmakerScalarWhereWithAggregatesInput | BookmakerScalarWhereWithAggregatesInput[]
    OR?: BookmakerScalarWhereWithAggregatesInput[]
    NOT?: BookmakerScalarWhereWithAggregatesInput | BookmakerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bookmaker"> | string
    name?: StringWithAggregatesFilter<"Bookmaker"> | string
    slug?: StringWithAggregatesFilter<"Bookmaker"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Bookmaker"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Bookmaker"> | Date | string
  }

  export type SportWhereInput = {
    AND?: SportWhereInput | SportWhereInput[]
    OR?: SportWhereInput[]
    NOT?: SportWhereInput | SportWhereInput[]
    id?: StringFilter<"Sport"> | string
    name?: StringFilter<"Sport"> | string
    slug?: StringFilter<"Sport"> | string
    icon?: StringFilter<"Sport"> | string
    createdAt?: DateTimeFilter<"Sport"> | Date | string
    updatedAt?: DateTimeFilter<"Sport"> | Date | string
    leagues?: LeagueListRelationFilter
    bookmakerLinks?: BookmakerSportListRelationFilter
  }

  export type SportOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    leagues?: LeagueOrderByRelationAggregateInput
    bookmakerLinks?: BookmakerSportOrderByRelationAggregateInput
  }

  export type SportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    icon?: string
    AND?: SportWhereInput | SportWhereInput[]
    OR?: SportWhereInput[]
    NOT?: SportWhereInput | SportWhereInput[]
    createdAt?: DateTimeFilter<"Sport"> | Date | string
    updatedAt?: DateTimeFilter<"Sport"> | Date | string
    leagues?: LeagueListRelationFilter
    bookmakerLinks?: BookmakerSportListRelationFilter
  }, "id" | "name" | "slug" | "icon">

  export type SportOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SportCountOrderByAggregateInput
    _max?: SportMaxOrderByAggregateInput
    _min?: SportMinOrderByAggregateInput
  }

  export type SportScalarWhereWithAggregatesInput = {
    AND?: SportScalarWhereWithAggregatesInput | SportScalarWhereWithAggregatesInput[]
    OR?: SportScalarWhereWithAggregatesInput[]
    NOT?: SportScalarWhereWithAggregatesInput | SportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sport"> | string
    name?: StringWithAggregatesFilter<"Sport"> | string
    slug?: StringWithAggregatesFilter<"Sport"> | string
    icon?: StringWithAggregatesFilter<"Sport"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Sport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sport"> | Date | string
  }

  export type LeagueWhereInput = {
    AND?: LeagueWhereInput | LeagueWhereInput[]
    OR?: LeagueWhereInput[]
    NOT?: LeagueWhereInput | LeagueWhereInput[]
    id?: StringFilter<"League"> | string
    name?: StringFilter<"League"> | string
    slug?: StringFilter<"League"> | string
    sportId?: StringFilter<"League"> | string
    countryId?: StringFilter<"League"> | string
    createdAt?: DateTimeFilter<"League"> | Date | string
    updatedAt?: DateTimeFilter<"League"> | Date | string
    sport?: XOR<SportScalarRelationFilter, SportWhereInput>
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    bookmakerLinks?: BookmakerLeagueListRelationFilter
  }

  export type LeagueOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    sportId?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sport?: SportOrderByWithRelationInput
    country?: CountryOrderByWithRelationInput
    bookmakerLinks?: BookmakerLeagueOrderByRelationAggregateInput
  }

  export type LeagueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sport_league_slug?: LeagueSport_league_slugCompoundUniqueInput
    AND?: LeagueWhereInput | LeagueWhereInput[]
    OR?: LeagueWhereInput[]
    NOT?: LeagueWhereInput | LeagueWhereInput[]
    name?: StringFilter<"League"> | string
    slug?: StringFilter<"League"> | string
    sportId?: StringFilter<"League"> | string
    countryId?: StringFilter<"League"> | string
    createdAt?: DateTimeFilter<"League"> | Date | string
    updatedAt?: DateTimeFilter<"League"> | Date | string
    sport?: XOR<SportScalarRelationFilter, SportWhereInput>
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    bookmakerLinks?: BookmakerLeagueListRelationFilter
  }, "id" | "sport_league_slug">

  export type LeagueOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    sportId?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LeagueCountOrderByAggregateInput
    _max?: LeagueMaxOrderByAggregateInput
    _min?: LeagueMinOrderByAggregateInput
  }

  export type LeagueScalarWhereWithAggregatesInput = {
    AND?: LeagueScalarWhereWithAggregatesInput | LeagueScalarWhereWithAggregatesInput[]
    OR?: LeagueScalarWhereWithAggregatesInput[]
    NOT?: LeagueScalarWhereWithAggregatesInput | LeagueScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"League"> | string
    name?: StringWithAggregatesFilter<"League"> | string
    slug?: StringWithAggregatesFilter<"League"> | string
    sportId?: StringWithAggregatesFilter<"League"> | string
    countryId?: StringWithAggregatesFilter<"League"> | string
    createdAt?: DateTimeWithAggregatesFilter<"League"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"League"> | Date | string
  }

  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    id?: StringFilter<"Country"> | string
    name?: StringFilter<"Country"> | string
    slug?: StringFilter<"Country"> | string
    icon?: StringFilter<"Country"> | string
    createdAt?: DateTimeFilter<"Country"> | Date | string
    updatedAt?: DateTimeFilter<"Country"> | Date | string
    leagues?: LeagueListRelationFilter
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    leagues?: LeagueOrderByRelationAggregateInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    icon?: string
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    createdAt?: DateTimeFilter<"Country"> | Date | string
    updatedAt?: DateTimeFilter<"Country"> | Date | string
    leagues?: LeagueListRelationFilter
  }, "id" | "name" | "slug" | "icon">

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Country"> | string
    name?: StringWithAggregatesFilter<"Country"> | string
    slug?: StringWithAggregatesFilter<"Country"> | string
    icon?: StringWithAggregatesFilter<"Country"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Country"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Country"> | Date | string
  }

  export type BookmakerSportWhereInput = {
    AND?: BookmakerSportWhereInput | BookmakerSportWhereInput[]
    OR?: BookmakerSportWhereInput[]
    NOT?: BookmakerSportWhereInput | BookmakerSportWhereInput[]
    bookmakerId?: StringFilter<"BookmakerSport"> | string
    sportId?: StringFilter<"BookmakerSport"> | string
    external_id?: StringFilter<"BookmakerSport"> | string
    createdAt?: DateTimeFilter<"BookmakerSport"> | Date | string
    updatedAt?: DateTimeFilter<"BookmakerSport"> | Date | string
    bookmaker?: XOR<BookmakerScalarRelationFilter, BookmakerWhereInput>
    sport?: XOR<SportScalarRelationFilter, SportWhereInput>
  }

  export type BookmakerSportOrderByWithRelationInput = {
    bookmakerId?: SortOrder
    sportId?: SortOrder
    external_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bookmaker?: BookmakerOrderByWithRelationInput
    sport?: SportOrderByWithRelationInput
  }

  export type BookmakerSportWhereUniqueInput = Prisma.AtLeast<{
    bookmakerId_sportId?: BookmakerSportBookmakerIdSportIdCompoundUniqueInput
    AND?: BookmakerSportWhereInput | BookmakerSportWhereInput[]
    OR?: BookmakerSportWhereInput[]
    NOT?: BookmakerSportWhereInput | BookmakerSportWhereInput[]
    bookmakerId?: StringFilter<"BookmakerSport"> | string
    sportId?: StringFilter<"BookmakerSport"> | string
    external_id?: StringFilter<"BookmakerSport"> | string
    createdAt?: DateTimeFilter<"BookmakerSport"> | Date | string
    updatedAt?: DateTimeFilter<"BookmakerSport"> | Date | string
    bookmaker?: XOR<BookmakerScalarRelationFilter, BookmakerWhereInput>
    sport?: XOR<SportScalarRelationFilter, SportWhereInput>
  }, "bookmakerId_sportId">

  export type BookmakerSportOrderByWithAggregationInput = {
    bookmakerId?: SortOrder
    sportId?: SortOrder
    external_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookmakerSportCountOrderByAggregateInput
    _max?: BookmakerSportMaxOrderByAggregateInput
    _min?: BookmakerSportMinOrderByAggregateInput
  }

  export type BookmakerSportScalarWhereWithAggregatesInput = {
    AND?: BookmakerSportScalarWhereWithAggregatesInput | BookmakerSportScalarWhereWithAggregatesInput[]
    OR?: BookmakerSportScalarWhereWithAggregatesInput[]
    NOT?: BookmakerSportScalarWhereWithAggregatesInput | BookmakerSportScalarWhereWithAggregatesInput[]
    bookmakerId?: StringWithAggregatesFilter<"BookmakerSport"> | string
    sportId?: StringWithAggregatesFilter<"BookmakerSport"> | string
    external_id?: StringWithAggregatesFilter<"BookmakerSport"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BookmakerSport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BookmakerSport"> | Date | string
  }

  export type BookmakerLeagueWhereInput = {
    AND?: BookmakerLeagueWhereInput | BookmakerLeagueWhereInput[]
    OR?: BookmakerLeagueWhereInput[]
    NOT?: BookmakerLeagueWhereInput | BookmakerLeagueWhereInput[]
    bookmakerId?: StringFilter<"BookmakerLeague"> | string
    leagueId?: StringFilter<"BookmakerLeague"> | string
    external_id?: StringFilter<"BookmakerLeague"> | string
    createdAt?: DateTimeFilter<"BookmakerLeague"> | Date | string
    updatedAt?: DateTimeFilter<"BookmakerLeague"> | Date | string
    bookmaker?: XOR<BookmakerScalarRelationFilter, BookmakerWhereInput>
    league?: XOR<LeagueScalarRelationFilter, LeagueWhereInput>
  }

  export type BookmakerLeagueOrderByWithRelationInput = {
    bookmakerId?: SortOrder
    leagueId?: SortOrder
    external_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bookmaker?: BookmakerOrderByWithRelationInput
    league?: LeagueOrderByWithRelationInput
  }

  export type BookmakerLeagueWhereUniqueInput = Prisma.AtLeast<{
    bookmakerId_leagueId?: BookmakerLeagueBookmakerIdLeagueIdCompoundUniqueInput
    AND?: BookmakerLeagueWhereInput | BookmakerLeagueWhereInput[]
    OR?: BookmakerLeagueWhereInput[]
    NOT?: BookmakerLeagueWhereInput | BookmakerLeagueWhereInput[]
    bookmakerId?: StringFilter<"BookmakerLeague"> | string
    leagueId?: StringFilter<"BookmakerLeague"> | string
    external_id?: StringFilter<"BookmakerLeague"> | string
    createdAt?: DateTimeFilter<"BookmakerLeague"> | Date | string
    updatedAt?: DateTimeFilter<"BookmakerLeague"> | Date | string
    bookmaker?: XOR<BookmakerScalarRelationFilter, BookmakerWhereInput>
    league?: XOR<LeagueScalarRelationFilter, LeagueWhereInput>
  }, "bookmakerId_leagueId">

  export type BookmakerLeagueOrderByWithAggregationInput = {
    bookmakerId?: SortOrder
    leagueId?: SortOrder
    external_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookmakerLeagueCountOrderByAggregateInput
    _max?: BookmakerLeagueMaxOrderByAggregateInput
    _min?: BookmakerLeagueMinOrderByAggregateInput
  }

  export type BookmakerLeagueScalarWhereWithAggregatesInput = {
    AND?: BookmakerLeagueScalarWhereWithAggregatesInput | BookmakerLeagueScalarWhereWithAggregatesInput[]
    OR?: BookmakerLeagueScalarWhereWithAggregatesInput[]
    NOT?: BookmakerLeagueScalarWhereWithAggregatesInput | BookmakerLeagueScalarWhereWithAggregatesInput[]
    bookmakerId?: StringWithAggregatesFilter<"BookmakerLeague"> | string
    leagueId?: StringWithAggregatesFilter<"BookmakerLeague"> | string
    external_id?: StringWithAggregatesFilter<"BookmakerLeague"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BookmakerLeague"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BookmakerLeague"> | Date | string
  }

  export type BookmakerCreateInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leagueLinks?: BookmakerLeagueCreateNestedManyWithoutBookmakerInput
    sportLinks?: BookmakerSportCreateNestedManyWithoutBookmakerInput
  }

  export type BookmakerUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leagueLinks?: BookmakerLeagueUncheckedCreateNestedManyWithoutBookmakerInput
    sportLinks?: BookmakerSportUncheckedCreateNestedManyWithoutBookmakerInput
  }

  export type BookmakerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagueLinks?: BookmakerLeagueUpdateManyWithoutBookmakerNestedInput
    sportLinks?: BookmakerSportUpdateManyWithoutBookmakerNestedInput
  }

  export type BookmakerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagueLinks?: BookmakerLeagueUncheckedUpdateManyWithoutBookmakerNestedInput
    sportLinks?: BookmakerSportUncheckedUpdateManyWithoutBookmakerNestedInput
  }

  export type BookmakerCreateManyInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SportCreateInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leagues?: LeagueCreateNestedManyWithoutSportInput
    bookmakerLinks?: BookmakerSportCreateNestedManyWithoutSportInput
  }

  export type SportUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leagues?: LeagueUncheckedCreateNestedManyWithoutSportInput
    bookmakerLinks?: BookmakerSportUncheckedCreateNestedManyWithoutSportInput
  }

  export type SportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUpdateManyWithoutSportNestedInput
    bookmakerLinks?: BookmakerSportUpdateManyWithoutSportNestedInput
  }

  export type SportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUncheckedUpdateManyWithoutSportNestedInput
    bookmakerLinks?: BookmakerSportUncheckedUpdateManyWithoutSportNestedInput
  }

  export type SportCreateManyInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueCreateInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sport: SportCreateNestedOneWithoutLeaguesInput
    country: CountryCreateNestedOneWithoutLeaguesInput
    bookmakerLinks?: BookmakerLeagueCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    sportId: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookmakerLinks?: BookmakerLeagueUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: SportUpdateOneRequiredWithoutLeaguesNestedInput
    country?: CountryUpdateOneRequiredWithoutLeaguesNestedInput
    bookmakerLinks?: BookmakerLeagueUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    sportId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmakerLinks?: BookmakerLeagueUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueCreateManyInput = {
    id?: string
    name: string
    slug: string
    sportId: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeagueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    sportId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryCreateInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leagues?: LeagueCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leagues?: LeagueUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryCreateManyInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CountryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerSportCreateInput = {
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookmaker: BookmakerCreateNestedOneWithoutSportLinksInput
    sport: SportCreateNestedOneWithoutBookmakerLinksInput
  }

  export type BookmakerSportUncheckedCreateInput = {
    bookmakerId: string
    sportId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerSportUpdateInput = {
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmaker?: BookmakerUpdateOneRequiredWithoutSportLinksNestedInput
    sport?: SportUpdateOneRequiredWithoutBookmakerLinksNestedInput
  }

  export type BookmakerSportUncheckedUpdateInput = {
    bookmakerId?: StringFieldUpdateOperationsInput | string
    sportId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerSportCreateManyInput = {
    bookmakerId: string
    sportId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerSportUpdateManyMutationInput = {
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerSportUncheckedUpdateManyInput = {
    bookmakerId?: StringFieldUpdateOperationsInput | string
    sportId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerLeagueCreateInput = {
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookmaker: BookmakerCreateNestedOneWithoutLeagueLinksInput
    league: LeagueCreateNestedOneWithoutBookmakerLinksInput
  }

  export type BookmakerLeagueUncheckedCreateInput = {
    bookmakerId: string
    leagueId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerLeagueUpdateInput = {
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmaker?: BookmakerUpdateOneRequiredWithoutLeagueLinksNestedInput
    league?: LeagueUpdateOneRequiredWithoutBookmakerLinksNestedInput
  }

  export type BookmakerLeagueUncheckedUpdateInput = {
    bookmakerId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerLeagueCreateManyInput = {
    bookmakerId: string
    leagueId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerLeagueUpdateManyMutationInput = {
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerLeagueUncheckedUpdateManyInput = {
    bookmakerId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BookmakerLeagueListRelationFilter = {
    every?: BookmakerLeagueWhereInput
    some?: BookmakerLeagueWhereInput
    none?: BookmakerLeagueWhereInput
  }

  export type BookmakerSportListRelationFilter = {
    every?: BookmakerSportWhereInput
    some?: BookmakerSportWhereInput
    none?: BookmakerSportWhereInput
  }

  export type BookmakerLeagueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookmakerSportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookmakerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookmakerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookmakerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LeagueListRelationFilter = {
    every?: LeagueWhereInput
    some?: LeagueWhereInput
    none?: LeagueWhereInput
  }

  export type LeagueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SportCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SportMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SportMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SportScalarRelationFilter = {
    is?: SportWhereInput
    isNot?: SportWhereInput
  }

  export type CountryScalarRelationFilter = {
    is?: CountryWhereInput
    isNot?: CountryWhereInput
  }

  export type LeagueSport_league_slugCompoundUniqueInput = {
    slug: string
    sportId: string
  }

  export type LeagueCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    sportId?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeagueMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    sportId?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeagueMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    sportId?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookmakerScalarRelationFilter = {
    is?: BookmakerWhereInput
    isNot?: BookmakerWhereInput
  }

  export type BookmakerSportBookmakerIdSportIdCompoundUniqueInput = {
    bookmakerId: string
    sportId: string
  }

  export type BookmakerSportCountOrderByAggregateInput = {
    bookmakerId?: SortOrder
    sportId?: SortOrder
    external_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookmakerSportMaxOrderByAggregateInput = {
    bookmakerId?: SortOrder
    sportId?: SortOrder
    external_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookmakerSportMinOrderByAggregateInput = {
    bookmakerId?: SortOrder
    sportId?: SortOrder
    external_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeagueScalarRelationFilter = {
    is?: LeagueWhereInput
    isNot?: LeagueWhereInput
  }

  export type BookmakerLeagueBookmakerIdLeagueIdCompoundUniqueInput = {
    bookmakerId: string
    leagueId: string
  }

  export type BookmakerLeagueCountOrderByAggregateInput = {
    bookmakerId?: SortOrder
    leagueId?: SortOrder
    external_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookmakerLeagueMaxOrderByAggregateInput = {
    bookmakerId?: SortOrder
    leagueId?: SortOrder
    external_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookmakerLeagueMinOrderByAggregateInput = {
    bookmakerId?: SortOrder
    leagueId?: SortOrder
    external_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookmakerLeagueCreateNestedManyWithoutBookmakerInput = {
    create?: XOR<BookmakerLeagueCreateWithoutBookmakerInput, BookmakerLeagueUncheckedCreateWithoutBookmakerInput> | BookmakerLeagueCreateWithoutBookmakerInput[] | BookmakerLeagueUncheckedCreateWithoutBookmakerInput[]
    connectOrCreate?: BookmakerLeagueCreateOrConnectWithoutBookmakerInput | BookmakerLeagueCreateOrConnectWithoutBookmakerInput[]
    createMany?: BookmakerLeagueCreateManyBookmakerInputEnvelope
    connect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
  }

  export type BookmakerSportCreateNestedManyWithoutBookmakerInput = {
    create?: XOR<BookmakerSportCreateWithoutBookmakerInput, BookmakerSportUncheckedCreateWithoutBookmakerInput> | BookmakerSportCreateWithoutBookmakerInput[] | BookmakerSportUncheckedCreateWithoutBookmakerInput[]
    connectOrCreate?: BookmakerSportCreateOrConnectWithoutBookmakerInput | BookmakerSportCreateOrConnectWithoutBookmakerInput[]
    createMany?: BookmakerSportCreateManyBookmakerInputEnvelope
    connect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
  }

  export type BookmakerLeagueUncheckedCreateNestedManyWithoutBookmakerInput = {
    create?: XOR<BookmakerLeagueCreateWithoutBookmakerInput, BookmakerLeagueUncheckedCreateWithoutBookmakerInput> | BookmakerLeagueCreateWithoutBookmakerInput[] | BookmakerLeagueUncheckedCreateWithoutBookmakerInput[]
    connectOrCreate?: BookmakerLeagueCreateOrConnectWithoutBookmakerInput | BookmakerLeagueCreateOrConnectWithoutBookmakerInput[]
    createMany?: BookmakerLeagueCreateManyBookmakerInputEnvelope
    connect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
  }

  export type BookmakerSportUncheckedCreateNestedManyWithoutBookmakerInput = {
    create?: XOR<BookmakerSportCreateWithoutBookmakerInput, BookmakerSportUncheckedCreateWithoutBookmakerInput> | BookmakerSportCreateWithoutBookmakerInput[] | BookmakerSportUncheckedCreateWithoutBookmakerInput[]
    connectOrCreate?: BookmakerSportCreateOrConnectWithoutBookmakerInput | BookmakerSportCreateOrConnectWithoutBookmakerInput[]
    createMany?: BookmakerSportCreateManyBookmakerInputEnvelope
    connect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BookmakerLeagueUpdateManyWithoutBookmakerNestedInput = {
    create?: XOR<BookmakerLeagueCreateWithoutBookmakerInput, BookmakerLeagueUncheckedCreateWithoutBookmakerInput> | BookmakerLeagueCreateWithoutBookmakerInput[] | BookmakerLeagueUncheckedCreateWithoutBookmakerInput[]
    connectOrCreate?: BookmakerLeagueCreateOrConnectWithoutBookmakerInput | BookmakerLeagueCreateOrConnectWithoutBookmakerInput[]
    upsert?: BookmakerLeagueUpsertWithWhereUniqueWithoutBookmakerInput | BookmakerLeagueUpsertWithWhereUniqueWithoutBookmakerInput[]
    createMany?: BookmakerLeagueCreateManyBookmakerInputEnvelope
    set?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    disconnect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    delete?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    connect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    update?: BookmakerLeagueUpdateWithWhereUniqueWithoutBookmakerInput | BookmakerLeagueUpdateWithWhereUniqueWithoutBookmakerInput[]
    updateMany?: BookmakerLeagueUpdateManyWithWhereWithoutBookmakerInput | BookmakerLeagueUpdateManyWithWhereWithoutBookmakerInput[]
    deleteMany?: BookmakerLeagueScalarWhereInput | BookmakerLeagueScalarWhereInput[]
  }

  export type BookmakerSportUpdateManyWithoutBookmakerNestedInput = {
    create?: XOR<BookmakerSportCreateWithoutBookmakerInput, BookmakerSportUncheckedCreateWithoutBookmakerInput> | BookmakerSportCreateWithoutBookmakerInput[] | BookmakerSportUncheckedCreateWithoutBookmakerInput[]
    connectOrCreate?: BookmakerSportCreateOrConnectWithoutBookmakerInput | BookmakerSportCreateOrConnectWithoutBookmakerInput[]
    upsert?: BookmakerSportUpsertWithWhereUniqueWithoutBookmakerInput | BookmakerSportUpsertWithWhereUniqueWithoutBookmakerInput[]
    createMany?: BookmakerSportCreateManyBookmakerInputEnvelope
    set?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    disconnect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    delete?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    connect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    update?: BookmakerSportUpdateWithWhereUniqueWithoutBookmakerInput | BookmakerSportUpdateWithWhereUniqueWithoutBookmakerInput[]
    updateMany?: BookmakerSportUpdateManyWithWhereWithoutBookmakerInput | BookmakerSportUpdateManyWithWhereWithoutBookmakerInput[]
    deleteMany?: BookmakerSportScalarWhereInput | BookmakerSportScalarWhereInput[]
  }

  export type BookmakerLeagueUncheckedUpdateManyWithoutBookmakerNestedInput = {
    create?: XOR<BookmakerLeagueCreateWithoutBookmakerInput, BookmakerLeagueUncheckedCreateWithoutBookmakerInput> | BookmakerLeagueCreateWithoutBookmakerInput[] | BookmakerLeagueUncheckedCreateWithoutBookmakerInput[]
    connectOrCreate?: BookmakerLeagueCreateOrConnectWithoutBookmakerInput | BookmakerLeagueCreateOrConnectWithoutBookmakerInput[]
    upsert?: BookmakerLeagueUpsertWithWhereUniqueWithoutBookmakerInput | BookmakerLeagueUpsertWithWhereUniqueWithoutBookmakerInput[]
    createMany?: BookmakerLeagueCreateManyBookmakerInputEnvelope
    set?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    disconnect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    delete?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    connect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    update?: BookmakerLeagueUpdateWithWhereUniqueWithoutBookmakerInput | BookmakerLeagueUpdateWithWhereUniqueWithoutBookmakerInput[]
    updateMany?: BookmakerLeagueUpdateManyWithWhereWithoutBookmakerInput | BookmakerLeagueUpdateManyWithWhereWithoutBookmakerInput[]
    deleteMany?: BookmakerLeagueScalarWhereInput | BookmakerLeagueScalarWhereInput[]
  }

  export type BookmakerSportUncheckedUpdateManyWithoutBookmakerNestedInput = {
    create?: XOR<BookmakerSportCreateWithoutBookmakerInput, BookmakerSportUncheckedCreateWithoutBookmakerInput> | BookmakerSportCreateWithoutBookmakerInput[] | BookmakerSportUncheckedCreateWithoutBookmakerInput[]
    connectOrCreate?: BookmakerSportCreateOrConnectWithoutBookmakerInput | BookmakerSportCreateOrConnectWithoutBookmakerInput[]
    upsert?: BookmakerSportUpsertWithWhereUniqueWithoutBookmakerInput | BookmakerSportUpsertWithWhereUniqueWithoutBookmakerInput[]
    createMany?: BookmakerSportCreateManyBookmakerInputEnvelope
    set?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    disconnect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    delete?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    connect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    update?: BookmakerSportUpdateWithWhereUniqueWithoutBookmakerInput | BookmakerSportUpdateWithWhereUniqueWithoutBookmakerInput[]
    updateMany?: BookmakerSportUpdateManyWithWhereWithoutBookmakerInput | BookmakerSportUpdateManyWithWhereWithoutBookmakerInput[]
    deleteMany?: BookmakerSportScalarWhereInput | BookmakerSportScalarWhereInput[]
  }

  export type LeagueCreateNestedManyWithoutSportInput = {
    create?: XOR<LeagueCreateWithoutSportInput, LeagueUncheckedCreateWithoutSportInput> | LeagueCreateWithoutSportInput[] | LeagueUncheckedCreateWithoutSportInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutSportInput | LeagueCreateOrConnectWithoutSportInput[]
    createMany?: LeagueCreateManySportInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type BookmakerSportCreateNestedManyWithoutSportInput = {
    create?: XOR<BookmakerSportCreateWithoutSportInput, BookmakerSportUncheckedCreateWithoutSportInput> | BookmakerSportCreateWithoutSportInput[] | BookmakerSportUncheckedCreateWithoutSportInput[]
    connectOrCreate?: BookmakerSportCreateOrConnectWithoutSportInput | BookmakerSportCreateOrConnectWithoutSportInput[]
    createMany?: BookmakerSportCreateManySportInputEnvelope
    connect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
  }

  export type LeagueUncheckedCreateNestedManyWithoutSportInput = {
    create?: XOR<LeagueCreateWithoutSportInput, LeagueUncheckedCreateWithoutSportInput> | LeagueCreateWithoutSportInput[] | LeagueUncheckedCreateWithoutSportInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutSportInput | LeagueCreateOrConnectWithoutSportInput[]
    createMany?: LeagueCreateManySportInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type BookmakerSportUncheckedCreateNestedManyWithoutSportInput = {
    create?: XOR<BookmakerSportCreateWithoutSportInput, BookmakerSportUncheckedCreateWithoutSportInput> | BookmakerSportCreateWithoutSportInput[] | BookmakerSportUncheckedCreateWithoutSportInput[]
    connectOrCreate?: BookmakerSportCreateOrConnectWithoutSportInput | BookmakerSportCreateOrConnectWithoutSportInput[]
    createMany?: BookmakerSportCreateManySportInputEnvelope
    connect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
  }

  export type LeagueUpdateManyWithoutSportNestedInput = {
    create?: XOR<LeagueCreateWithoutSportInput, LeagueUncheckedCreateWithoutSportInput> | LeagueCreateWithoutSportInput[] | LeagueUncheckedCreateWithoutSportInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutSportInput | LeagueCreateOrConnectWithoutSportInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutSportInput | LeagueUpsertWithWhereUniqueWithoutSportInput[]
    createMany?: LeagueCreateManySportInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutSportInput | LeagueUpdateWithWhereUniqueWithoutSportInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutSportInput | LeagueUpdateManyWithWhereWithoutSportInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type BookmakerSportUpdateManyWithoutSportNestedInput = {
    create?: XOR<BookmakerSportCreateWithoutSportInput, BookmakerSportUncheckedCreateWithoutSportInput> | BookmakerSportCreateWithoutSportInput[] | BookmakerSportUncheckedCreateWithoutSportInput[]
    connectOrCreate?: BookmakerSportCreateOrConnectWithoutSportInput | BookmakerSportCreateOrConnectWithoutSportInput[]
    upsert?: BookmakerSportUpsertWithWhereUniqueWithoutSportInput | BookmakerSportUpsertWithWhereUniqueWithoutSportInput[]
    createMany?: BookmakerSportCreateManySportInputEnvelope
    set?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    disconnect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    delete?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    connect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    update?: BookmakerSportUpdateWithWhereUniqueWithoutSportInput | BookmakerSportUpdateWithWhereUniqueWithoutSportInput[]
    updateMany?: BookmakerSportUpdateManyWithWhereWithoutSportInput | BookmakerSportUpdateManyWithWhereWithoutSportInput[]
    deleteMany?: BookmakerSportScalarWhereInput | BookmakerSportScalarWhereInput[]
  }

  export type LeagueUncheckedUpdateManyWithoutSportNestedInput = {
    create?: XOR<LeagueCreateWithoutSportInput, LeagueUncheckedCreateWithoutSportInput> | LeagueCreateWithoutSportInput[] | LeagueUncheckedCreateWithoutSportInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutSportInput | LeagueCreateOrConnectWithoutSportInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutSportInput | LeagueUpsertWithWhereUniqueWithoutSportInput[]
    createMany?: LeagueCreateManySportInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutSportInput | LeagueUpdateWithWhereUniqueWithoutSportInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutSportInput | LeagueUpdateManyWithWhereWithoutSportInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type BookmakerSportUncheckedUpdateManyWithoutSportNestedInput = {
    create?: XOR<BookmakerSportCreateWithoutSportInput, BookmakerSportUncheckedCreateWithoutSportInput> | BookmakerSportCreateWithoutSportInput[] | BookmakerSportUncheckedCreateWithoutSportInput[]
    connectOrCreate?: BookmakerSportCreateOrConnectWithoutSportInput | BookmakerSportCreateOrConnectWithoutSportInput[]
    upsert?: BookmakerSportUpsertWithWhereUniqueWithoutSportInput | BookmakerSportUpsertWithWhereUniqueWithoutSportInput[]
    createMany?: BookmakerSportCreateManySportInputEnvelope
    set?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    disconnect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    delete?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    connect?: BookmakerSportWhereUniqueInput | BookmakerSportWhereUniqueInput[]
    update?: BookmakerSportUpdateWithWhereUniqueWithoutSportInput | BookmakerSportUpdateWithWhereUniqueWithoutSportInput[]
    updateMany?: BookmakerSportUpdateManyWithWhereWithoutSportInput | BookmakerSportUpdateManyWithWhereWithoutSportInput[]
    deleteMany?: BookmakerSportScalarWhereInput | BookmakerSportScalarWhereInput[]
  }

  export type SportCreateNestedOneWithoutLeaguesInput = {
    create?: XOR<SportCreateWithoutLeaguesInput, SportUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: SportCreateOrConnectWithoutLeaguesInput
    connect?: SportWhereUniqueInput
  }

  export type CountryCreateNestedOneWithoutLeaguesInput = {
    create?: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutLeaguesInput
    connect?: CountryWhereUniqueInput
  }

  export type BookmakerLeagueCreateNestedManyWithoutLeagueInput = {
    create?: XOR<BookmakerLeagueCreateWithoutLeagueInput, BookmakerLeagueUncheckedCreateWithoutLeagueInput> | BookmakerLeagueCreateWithoutLeagueInput[] | BookmakerLeagueUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: BookmakerLeagueCreateOrConnectWithoutLeagueInput | BookmakerLeagueCreateOrConnectWithoutLeagueInput[]
    createMany?: BookmakerLeagueCreateManyLeagueInputEnvelope
    connect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
  }

  export type BookmakerLeagueUncheckedCreateNestedManyWithoutLeagueInput = {
    create?: XOR<BookmakerLeagueCreateWithoutLeagueInput, BookmakerLeagueUncheckedCreateWithoutLeagueInput> | BookmakerLeagueCreateWithoutLeagueInput[] | BookmakerLeagueUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: BookmakerLeagueCreateOrConnectWithoutLeagueInput | BookmakerLeagueCreateOrConnectWithoutLeagueInput[]
    createMany?: BookmakerLeagueCreateManyLeagueInputEnvelope
    connect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
  }

  export type SportUpdateOneRequiredWithoutLeaguesNestedInput = {
    create?: XOR<SportCreateWithoutLeaguesInput, SportUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: SportCreateOrConnectWithoutLeaguesInput
    upsert?: SportUpsertWithoutLeaguesInput
    connect?: SportWhereUniqueInput
    update?: XOR<XOR<SportUpdateToOneWithWhereWithoutLeaguesInput, SportUpdateWithoutLeaguesInput>, SportUncheckedUpdateWithoutLeaguesInput>
  }

  export type CountryUpdateOneRequiredWithoutLeaguesNestedInput = {
    create?: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutLeaguesInput
    upsert?: CountryUpsertWithoutLeaguesInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutLeaguesInput, CountryUpdateWithoutLeaguesInput>, CountryUncheckedUpdateWithoutLeaguesInput>
  }

  export type BookmakerLeagueUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<BookmakerLeagueCreateWithoutLeagueInput, BookmakerLeagueUncheckedCreateWithoutLeagueInput> | BookmakerLeagueCreateWithoutLeagueInput[] | BookmakerLeagueUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: BookmakerLeagueCreateOrConnectWithoutLeagueInput | BookmakerLeagueCreateOrConnectWithoutLeagueInput[]
    upsert?: BookmakerLeagueUpsertWithWhereUniqueWithoutLeagueInput | BookmakerLeagueUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: BookmakerLeagueCreateManyLeagueInputEnvelope
    set?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    disconnect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    delete?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    connect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    update?: BookmakerLeagueUpdateWithWhereUniqueWithoutLeagueInput | BookmakerLeagueUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: BookmakerLeagueUpdateManyWithWhereWithoutLeagueInput | BookmakerLeagueUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: BookmakerLeagueScalarWhereInput | BookmakerLeagueScalarWhereInput[]
  }

  export type BookmakerLeagueUncheckedUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<BookmakerLeagueCreateWithoutLeagueInput, BookmakerLeagueUncheckedCreateWithoutLeagueInput> | BookmakerLeagueCreateWithoutLeagueInput[] | BookmakerLeagueUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: BookmakerLeagueCreateOrConnectWithoutLeagueInput | BookmakerLeagueCreateOrConnectWithoutLeagueInput[]
    upsert?: BookmakerLeagueUpsertWithWhereUniqueWithoutLeagueInput | BookmakerLeagueUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: BookmakerLeagueCreateManyLeagueInputEnvelope
    set?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    disconnect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    delete?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    connect?: BookmakerLeagueWhereUniqueInput | BookmakerLeagueWhereUniqueInput[]
    update?: BookmakerLeagueUpdateWithWhereUniqueWithoutLeagueInput | BookmakerLeagueUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: BookmakerLeagueUpdateManyWithWhereWithoutLeagueInput | BookmakerLeagueUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: BookmakerLeagueScalarWhereInput | BookmakerLeagueScalarWhereInput[]
  }

  export type LeagueCreateNestedManyWithoutCountryInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type LeagueUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type LeagueUpdateManyWithoutCountryNestedInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutCountryInput | LeagueUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutCountryInput | LeagueUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutCountryInput | LeagueUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type LeagueUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutCountryInput | LeagueUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutCountryInput | LeagueUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutCountryInput | LeagueUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type BookmakerCreateNestedOneWithoutSportLinksInput = {
    create?: XOR<BookmakerCreateWithoutSportLinksInput, BookmakerUncheckedCreateWithoutSportLinksInput>
    connectOrCreate?: BookmakerCreateOrConnectWithoutSportLinksInput
    connect?: BookmakerWhereUniqueInput
  }

  export type SportCreateNestedOneWithoutBookmakerLinksInput = {
    create?: XOR<SportCreateWithoutBookmakerLinksInput, SportUncheckedCreateWithoutBookmakerLinksInput>
    connectOrCreate?: SportCreateOrConnectWithoutBookmakerLinksInput
    connect?: SportWhereUniqueInput
  }

  export type BookmakerUpdateOneRequiredWithoutSportLinksNestedInput = {
    create?: XOR<BookmakerCreateWithoutSportLinksInput, BookmakerUncheckedCreateWithoutSportLinksInput>
    connectOrCreate?: BookmakerCreateOrConnectWithoutSportLinksInput
    upsert?: BookmakerUpsertWithoutSportLinksInput
    connect?: BookmakerWhereUniqueInput
    update?: XOR<XOR<BookmakerUpdateToOneWithWhereWithoutSportLinksInput, BookmakerUpdateWithoutSportLinksInput>, BookmakerUncheckedUpdateWithoutSportLinksInput>
  }

  export type SportUpdateOneRequiredWithoutBookmakerLinksNestedInput = {
    create?: XOR<SportCreateWithoutBookmakerLinksInput, SportUncheckedCreateWithoutBookmakerLinksInput>
    connectOrCreate?: SportCreateOrConnectWithoutBookmakerLinksInput
    upsert?: SportUpsertWithoutBookmakerLinksInput
    connect?: SportWhereUniqueInput
    update?: XOR<XOR<SportUpdateToOneWithWhereWithoutBookmakerLinksInput, SportUpdateWithoutBookmakerLinksInput>, SportUncheckedUpdateWithoutBookmakerLinksInput>
  }

  export type BookmakerCreateNestedOneWithoutLeagueLinksInput = {
    create?: XOR<BookmakerCreateWithoutLeagueLinksInput, BookmakerUncheckedCreateWithoutLeagueLinksInput>
    connectOrCreate?: BookmakerCreateOrConnectWithoutLeagueLinksInput
    connect?: BookmakerWhereUniqueInput
  }

  export type LeagueCreateNestedOneWithoutBookmakerLinksInput = {
    create?: XOR<LeagueCreateWithoutBookmakerLinksInput, LeagueUncheckedCreateWithoutBookmakerLinksInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutBookmakerLinksInput
    connect?: LeagueWhereUniqueInput
  }

  export type BookmakerUpdateOneRequiredWithoutLeagueLinksNestedInput = {
    create?: XOR<BookmakerCreateWithoutLeagueLinksInput, BookmakerUncheckedCreateWithoutLeagueLinksInput>
    connectOrCreate?: BookmakerCreateOrConnectWithoutLeagueLinksInput
    upsert?: BookmakerUpsertWithoutLeagueLinksInput
    connect?: BookmakerWhereUniqueInput
    update?: XOR<XOR<BookmakerUpdateToOneWithWhereWithoutLeagueLinksInput, BookmakerUpdateWithoutLeagueLinksInput>, BookmakerUncheckedUpdateWithoutLeagueLinksInput>
  }

  export type LeagueUpdateOneRequiredWithoutBookmakerLinksNestedInput = {
    create?: XOR<LeagueCreateWithoutBookmakerLinksInput, LeagueUncheckedCreateWithoutBookmakerLinksInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutBookmakerLinksInput
    upsert?: LeagueUpsertWithoutBookmakerLinksInput
    connect?: LeagueWhereUniqueInput
    update?: XOR<XOR<LeagueUpdateToOneWithWhereWithoutBookmakerLinksInput, LeagueUpdateWithoutBookmakerLinksInput>, LeagueUncheckedUpdateWithoutBookmakerLinksInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BookmakerLeagueCreateWithoutBookmakerInput = {
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    league: LeagueCreateNestedOneWithoutBookmakerLinksInput
  }

  export type BookmakerLeagueUncheckedCreateWithoutBookmakerInput = {
    leagueId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerLeagueCreateOrConnectWithoutBookmakerInput = {
    where: BookmakerLeagueWhereUniqueInput
    create: XOR<BookmakerLeagueCreateWithoutBookmakerInput, BookmakerLeagueUncheckedCreateWithoutBookmakerInput>
  }

  export type BookmakerLeagueCreateManyBookmakerInputEnvelope = {
    data: BookmakerLeagueCreateManyBookmakerInput | BookmakerLeagueCreateManyBookmakerInput[]
    skipDuplicates?: boolean
  }

  export type BookmakerSportCreateWithoutBookmakerInput = {
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sport: SportCreateNestedOneWithoutBookmakerLinksInput
  }

  export type BookmakerSportUncheckedCreateWithoutBookmakerInput = {
    sportId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerSportCreateOrConnectWithoutBookmakerInput = {
    where: BookmakerSportWhereUniqueInput
    create: XOR<BookmakerSportCreateWithoutBookmakerInput, BookmakerSportUncheckedCreateWithoutBookmakerInput>
  }

  export type BookmakerSportCreateManyBookmakerInputEnvelope = {
    data: BookmakerSportCreateManyBookmakerInput | BookmakerSportCreateManyBookmakerInput[]
    skipDuplicates?: boolean
  }

  export type BookmakerLeagueUpsertWithWhereUniqueWithoutBookmakerInput = {
    where: BookmakerLeagueWhereUniqueInput
    update: XOR<BookmakerLeagueUpdateWithoutBookmakerInput, BookmakerLeagueUncheckedUpdateWithoutBookmakerInput>
    create: XOR<BookmakerLeagueCreateWithoutBookmakerInput, BookmakerLeagueUncheckedCreateWithoutBookmakerInput>
  }

  export type BookmakerLeagueUpdateWithWhereUniqueWithoutBookmakerInput = {
    where: BookmakerLeagueWhereUniqueInput
    data: XOR<BookmakerLeagueUpdateWithoutBookmakerInput, BookmakerLeagueUncheckedUpdateWithoutBookmakerInput>
  }

  export type BookmakerLeagueUpdateManyWithWhereWithoutBookmakerInput = {
    where: BookmakerLeagueScalarWhereInput
    data: XOR<BookmakerLeagueUpdateManyMutationInput, BookmakerLeagueUncheckedUpdateManyWithoutBookmakerInput>
  }

  export type BookmakerLeagueScalarWhereInput = {
    AND?: BookmakerLeagueScalarWhereInput | BookmakerLeagueScalarWhereInput[]
    OR?: BookmakerLeagueScalarWhereInput[]
    NOT?: BookmakerLeagueScalarWhereInput | BookmakerLeagueScalarWhereInput[]
    bookmakerId?: StringFilter<"BookmakerLeague"> | string
    leagueId?: StringFilter<"BookmakerLeague"> | string
    external_id?: StringFilter<"BookmakerLeague"> | string
    createdAt?: DateTimeFilter<"BookmakerLeague"> | Date | string
    updatedAt?: DateTimeFilter<"BookmakerLeague"> | Date | string
  }

  export type BookmakerSportUpsertWithWhereUniqueWithoutBookmakerInput = {
    where: BookmakerSportWhereUniqueInput
    update: XOR<BookmakerSportUpdateWithoutBookmakerInput, BookmakerSportUncheckedUpdateWithoutBookmakerInput>
    create: XOR<BookmakerSportCreateWithoutBookmakerInput, BookmakerSportUncheckedCreateWithoutBookmakerInput>
  }

  export type BookmakerSportUpdateWithWhereUniqueWithoutBookmakerInput = {
    where: BookmakerSportWhereUniqueInput
    data: XOR<BookmakerSportUpdateWithoutBookmakerInput, BookmakerSportUncheckedUpdateWithoutBookmakerInput>
  }

  export type BookmakerSportUpdateManyWithWhereWithoutBookmakerInput = {
    where: BookmakerSportScalarWhereInput
    data: XOR<BookmakerSportUpdateManyMutationInput, BookmakerSportUncheckedUpdateManyWithoutBookmakerInput>
  }

  export type BookmakerSportScalarWhereInput = {
    AND?: BookmakerSportScalarWhereInput | BookmakerSportScalarWhereInput[]
    OR?: BookmakerSportScalarWhereInput[]
    NOT?: BookmakerSportScalarWhereInput | BookmakerSportScalarWhereInput[]
    bookmakerId?: StringFilter<"BookmakerSport"> | string
    sportId?: StringFilter<"BookmakerSport"> | string
    external_id?: StringFilter<"BookmakerSport"> | string
    createdAt?: DateTimeFilter<"BookmakerSport"> | Date | string
    updatedAt?: DateTimeFilter<"BookmakerSport"> | Date | string
  }

  export type LeagueCreateWithoutSportInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutLeaguesInput
    bookmakerLinks?: BookmakerLeagueCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutSportInput = {
    id?: string
    name: string
    slug: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookmakerLinks?: BookmakerLeagueUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutSportInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutSportInput, LeagueUncheckedCreateWithoutSportInput>
  }

  export type LeagueCreateManySportInputEnvelope = {
    data: LeagueCreateManySportInput | LeagueCreateManySportInput[]
    skipDuplicates?: boolean
  }

  export type BookmakerSportCreateWithoutSportInput = {
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookmaker: BookmakerCreateNestedOneWithoutSportLinksInput
  }

  export type BookmakerSportUncheckedCreateWithoutSportInput = {
    bookmakerId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerSportCreateOrConnectWithoutSportInput = {
    where: BookmakerSportWhereUniqueInput
    create: XOR<BookmakerSportCreateWithoutSportInput, BookmakerSportUncheckedCreateWithoutSportInput>
  }

  export type BookmakerSportCreateManySportInputEnvelope = {
    data: BookmakerSportCreateManySportInput | BookmakerSportCreateManySportInput[]
    skipDuplicates?: boolean
  }

  export type LeagueUpsertWithWhereUniqueWithoutSportInput = {
    where: LeagueWhereUniqueInput
    update: XOR<LeagueUpdateWithoutSportInput, LeagueUncheckedUpdateWithoutSportInput>
    create: XOR<LeagueCreateWithoutSportInput, LeagueUncheckedCreateWithoutSportInput>
  }

  export type LeagueUpdateWithWhereUniqueWithoutSportInput = {
    where: LeagueWhereUniqueInput
    data: XOR<LeagueUpdateWithoutSportInput, LeagueUncheckedUpdateWithoutSportInput>
  }

  export type LeagueUpdateManyWithWhereWithoutSportInput = {
    where: LeagueScalarWhereInput
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyWithoutSportInput>
  }

  export type LeagueScalarWhereInput = {
    AND?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
    OR?: LeagueScalarWhereInput[]
    NOT?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
    id?: StringFilter<"League"> | string
    name?: StringFilter<"League"> | string
    slug?: StringFilter<"League"> | string
    sportId?: StringFilter<"League"> | string
    countryId?: StringFilter<"League"> | string
    createdAt?: DateTimeFilter<"League"> | Date | string
    updatedAt?: DateTimeFilter<"League"> | Date | string
  }

  export type BookmakerSportUpsertWithWhereUniqueWithoutSportInput = {
    where: BookmakerSportWhereUniqueInput
    update: XOR<BookmakerSportUpdateWithoutSportInput, BookmakerSportUncheckedUpdateWithoutSportInput>
    create: XOR<BookmakerSportCreateWithoutSportInput, BookmakerSportUncheckedCreateWithoutSportInput>
  }

  export type BookmakerSportUpdateWithWhereUniqueWithoutSportInput = {
    where: BookmakerSportWhereUniqueInput
    data: XOR<BookmakerSportUpdateWithoutSportInput, BookmakerSportUncheckedUpdateWithoutSportInput>
  }

  export type BookmakerSportUpdateManyWithWhereWithoutSportInput = {
    where: BookmakerSportScalarWhereInput
    data: XOR<BookmakerSportUpdateManyMutationInput, BookmakerSportUncheckedUpdateManyWithoutSportInput>
  }

  export type SportCreateWithoutLeaguesInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookmakerLinks?: BookmakerSportCreateNestedManyWithoutSportInput
  }

  export type SportUncheckedCreateWithoutLeaguesInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookmakerLinks?: BookmakerSportUncheckedCreateNestedManyWithoutSportInput
  }

  export type SportCreateOrConnectWithoutLeaguesInput = {
    where: SportWhereUniqueInput
    create: XOR<SportCreateWithoutLeaguesInput, SportUncheckedCreateWithoutLeaguesInput>
  }

  export type CountryCreateWithoutLeaguesInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CountryUncheckedCreateWithoutLeaguesInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CountryCreateOrConnectWithoutLeaguesInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
  }

  export type BookmakerLeagueCreateWithoutLeagueInput = {
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookmaker: BookmakerCreateNestedOneWithoutLeagueLinksInput
  }

  export type BookmakerLeagueUncheckedCreateWithoutLeagueInput = {
    bookmakerId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerLeagueCreateOrConnectWithoutLeagueInput = {
    where: BookmakerLeagueWhereUniqueInput
    create: XOR<BookmakerLeagueCreateWithoutLeagueInput, BookmakerLeagueUncheckedCreateWithoutLeagueInput>
  }

  export type BookmakerLeagueCreateManyLeagueInputEnvelope = {
    data: BookmakerLeagueCreateManyLeagueInput | BookmakerLeagueCreateManyLeagueInput[]
    skipDuplicates?: boolean
  }

  export type SportUpsertWithoutLeaguesInput = {
    update: XOR<SportUpdateWithoutLeaguesInput, SportUncheckedUpdateWithoutLeaguesInput>
    create: XOR<SportCreateWithoutLeaguesInput, SportUncheckedCreateWithoutLeaguesInput>
    where?: SportWhereInput
  }

  export type SportUpdateToOneWithWhereWithoutLeaguesInput = {
    where?: SportWhereInput
    data: XOR<SportUpdateWithoutLeaguesInput, SportUncheckedUpdateWithoutLeaguesInput>
  }

  export type SportUpdateWithoutLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmakerLinks?: BookmakerSportUpdateManyWithoutSportNestedInput
  }

  export type SportUncheckedUpdateWithoutLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmakerLinks?: BookmakerSportUncheckedUpdateManyWithoutSportNestedInput
  }

  export type CountryUpsertWithoutLeaguesInput = {
    update: XOR<CountryUpdateWithoutLeaguesInput, CountryUncheckedUpdateWithoutLeaguesInput>
    create: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutLeaguesInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutLeaguesInput, CountryUncheckedUpdateWithoutLeaguesInput>
  }

  export type CountryUpdateWithoutLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateWithoutLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerLeagueUpsertWithWhereUniqueWithoutLeagueInput = {
    where: BookmakerLeagueWhereUniqueInput
    update: XOR<BookmakerLeagueUpdateWithoutLeagueInput, BookmakerLeagueUncheckedUpdateWithoutLeagueInput>
    create: XOR<BookmakerLeagueCreateWithoutLeagueInput, BookmakerLeagueUncheckedCreateWithoutLeagueInput>
  }

  export type BookmakerLeagueUpdateWithWhereUniqueWithoutLeagueInput = {
    where: BookmakerLeagueWhereUniqueInput
    data: XOR<BookmakerLeagueUpdateWithoutLeagueInput, BookmakerLeagueUncheckedUpdateWithoutLeagueInput>
  }

  export type BookmakerLeagueUpdateManyWithWhereWithoutLeagueInput = {
    where: BookmakerLeagueScalarWhereInput
    data: XOR<BookmakerLeagueUpdateManyMutationInput, BookmakerLeagueUncheckedUpdateManyWithoutLeagueInput>
  }

  export type LeagueCreateWithoutCountryInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sport: SportCreateNestedOneWithoutLeaguesInput
    bookmakerLinks?: BookmakerLeagueCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutCountryInput = {
    id?: string
    name: string
    slug: string
    sportId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookmakerLinks?: BookmakerLeagueUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutCountryInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput>
  }

  export type LeagueCreateManyCountryInputEnvelope = {
    data: LeagueCreateManyCountryInput | LeagueCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type LeagueUpsertWithWhereUniqueWithoutCountryInput = {
    where: LeagueWhereUniqueInput
    update: XOR<LeagueUpdateWithoutCountryInput, LeagueUncheckedUpdateWithoutCountryInput>
    create: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput>
  }

  export type LeagueUpdateWithWhereUniqueWithoutCountryInput = {
    where: LeagueWhereUniqueInput
    data: XOR<LeagueUpdateWithoutCountryInput, LeagueUncheckedUpdateWithoutCountryInput>
  }

  export type LeagueUpdateManyWithWhereWithoutCountryInput = {
    where: LeagueScalarWhereInput
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyWithoutCountryInput>
  }

  export type BookmakerCreateWithoutSportLinksInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leagueLinks?: BookmakerLeagueCreateNestedManyWithoutBookmakerInput
  }

  export type BookmakerUncheckedCreateWithoutSportLinksInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leagueLinks?: BookmakerLeagueUncheckedCreateNestedManyWithoutBookmakerInput
  }

  export type BookmakerCreateOrConnectWithoutSportLinksInput = {
    where: BookmakerWhereUniqueInput
    create: XOR<BookmakerCreateWithoutSportLinksInput, BookmakerUncheckedCreateWithoutSportLinksInput>
  }

  export type SportCreateWithoutBookmakerLinksInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leagues?: LeagueCreateNestedManyWithoutSportInput
  }

  export type SportUncheckedCreateWithoutBookmakerLinksInput = {
    id?: string
    name: string
    slug: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leagues?: LeagueUncheckedCreateNestedManyWithoutSportInput
  }

  export type SportCreateOrConnectWithoutBookmakerLinksInput = {
    where: SportWhereUniqueInput
    create: XOR<SportCreateWithoutBookmakerLinksInput, SportUncheckedCreateWithoutBookmakerLinksInput>
  }

  export type BookmakerUpsertWithoutSportLinksInput = {
    update: XOR<BookmakerUpdateWithoutSportLinksInput, BookmakerUncheckedUpdateWithoutSportLinksInput>
    create: XOR<BookmakerCreateWithoutSportLinksInput, BookmakerUncheckedCreateWithoutSportLinksInput>
    where?: BookmakerWhereInput
  }

  export type BookmakerUpdateToOneWithWhereWithoutSportLinksInput = {
    where?: BookmakerWhereInput
    data: XOR<BookmakerUpdateWithoutSportLinksInput, BookmakerUncheckedUpdateWithoutSportLinksInput>
  }

  export type BookmakerUpdateWithoutSportLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagueLinks?: BookmakerLeagueUpdateManyWithoutBookmakerNestedInput
  }

  export type BookmakerUncheckedUpdateWithoutSportLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagueLinks?: BookmakerLeagueUncheckedUpdateManyWithoutBookmakerNestedInput
  }

  export type SportUpsertWithoutBookmakerLinksInput = {
    update: XOR<SportUpdateWithoutBookmakerLinksInput, SportUncheckedUpdateWithoutBookmakerLinksInput>
    create: XOR<SportCreateWithoutBookmakerLinksInput, SportUncheckedCreateWithoutBookmakerLinksInput>
    where?: SportWhereInput
  }

  export type SportUpdateToOneWithWhereWithoutBookmakerLinksInput = {
    where?: SportWhereInput
    data: XOR<SportUpdateWithoutBookmakerLinksInput, SportUncheckedUpdateWithoutBookmakerLinksInput>
  }

  export type SportUpdateWithoutBookmakerLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUpdateManyWithoutSportNestedInput
  }

  export type SportUncheckedUpdateWithoutBookmakerLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUncheckedUpdateManyWithoutSportNestedInput
  }

  export type BookmakerCreateWithoutLeagueLinksInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sportLinks?: BookmakerSportCreateNestedManyWithoutBookmakerInput
  }

  export type BookmakerUncheckedCreateWithoutLeagueLinksInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sportLinks?: BookmakerSportUncheckedCreateNestedManyWithoutBookmakerInput
  }

  export type BookmakerCreateOrConnectWithoutLeagueLinksInput = {
    where: BookmakerWhereUniqueInput
    create: XOR<BookmakerCreateWithoutLeagueLinksInput, BookmakerUncheckedCreateWithoutLeagueLinksInput>
  }

  export type LeagueCreateWithoutBookmakerLinksInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sport: SportCreateNestedOneWithoutLeaguesInput
    country: CountryCreateNestedOneWithoutLeaguesInput
  }

  export type LeagueUncheckedCreateWithoutBookmakerLinksInput = {
    id?: string
    name: string
    slug: string
    sportId: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeagueCreateOrConnectWithoutBookmakerLinksInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutBookmakerLinksInput, LeagueUncheckedCreateWithoutBookmakerLinksInput>
  }

  export type BookmakerUpsertWithoutLeagueLinksInput = {
    update: XOR<BookmakerUpdateWithoutLeagueLinksInput, BookmakerUncheckedUpdateWithoutLeagueLinksInput>
    create: XOR<BookmakerCreateWithoutLeagueLinksInput, BookmakerUncheckedCreateWithoutLeagueLinksInput>
    where?: BookmakerWhereInput
  }

  export type BookmakerUpdateToOneWithWhereWithoutLeagueLinksInput = {
    where?: BookmakerWhereInput
    data: XOR<BookmakerUpdateWithoutLeagueLinksInput, BookmakerUncheckedUpdateWithoutLeagueLinksInput>
  }

  export type BookmakerUpdateWithoutLeagueLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sportLinks?: BookmakerSportUpdateManyWithoutBookmakerNestedInput
  }

  export type BookmakerUncheckedUpdateWithoutLeagueLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sportLinks?: BookmakerSportUncheckedUpdateManyWithoutBookmakerNestedInput
  }

  export type LeagueUpsertWithoutBookmakerLinksInput = {
    update: XOR<LeagueUpdateWithoutBookmakerLinksInput, LeagueUncheckedUpdateWithoutBookmakerLinksInput>
    create: XOR<LeagueCreateWithoutBookmakerLinksInput, LeagueUncheckedCreateWithoutBookmakerLinksInput>
    where?: LeagueWhereInput
  }

  export type LeagueUpdateToOneWithWhereWithoutBookmakerLinksInput = {
    where?: LeagueWhereInput
    data: XOR<LeagueUpdateWithoutBookmakerLinksInput, LeagueUncheckedUpdateWithoutBookmakerLinksInput>
  }

  export type LeagueUpdateWithoutBookmakerLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: SportUpdateOneRequiredWithoutLeaguesNestedInput
    country?: CountryUpdateOneRequiredWithoutLeaguesNestedInput
  }

  export type LeagueUncheckedUpdateWithoutBookmakerLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    sportId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerLeagueCreateManyBookmakerInput = {
    leagueId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerSportCreateManyBookmakerInput = {
    sportId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerLeagueUpdateWithoutBookmakerInput = {
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    league?: LeagueUpdateOneRequiredWithoutBookmakerLinksNestedInput
  }

  export type BookmakerLeagueUncheckedUpdateWithoutBookmakerInput = {
    leagueId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerLeagueUncheckedUpdateManyWithoutBookmakerInput = {
    leagueId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerSportUpdateWithoutBookmakerInput = {
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: SportUpdateOneRequiredWithoutBookmakerLinksNestedInput
  }

  export type BookmakerSportUncheckedUpdateWithoutBookmakerInput = {
    sportId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerSportUncheckedUpdateManyWithoutBookmakerInput = {
    sportId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueCreateManySportInput = {
    id?: string
    name: string
    slug: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerSportCreateManySportInput = {
    bookmakerId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeagueUpdateWithoutSportInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutLeaguesNestedInput
    bookmakerLinks?: BookmakerLeagueUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutSportInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmakerLinks?: BookmakerLeagueUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateManyWithoutSportInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerSportUpdateWithoutSportInput = {
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmaker?: BookmakerUpdateOneRequiredWithoutSportLinksNestedInput
  }

  export type BookmakerSportUncheckedUpdateWithoutSportInput = {
    bookmakerId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerSportUncheckedUpdateManyWithoutSportInput = {
    bookmakerId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerLeagueCreateManyLeagueInput = {
    bookmakerId: string
    external_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookmakerLeagueUpdateWithoutLeagueInput = {
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmaker?: BookmakerUpdateOneRequiredWithoutLeagueLinksNestedInput
  }

  export type BookmakerLeagueUncheckedUpdateWithoutLeagueInput = {
    bookmakerId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmakerLeagueUncheckedUpdateManyWithoutLeagueInput = {
    bookmakerId?: StringFieldUpdateOperationsInput | string
    external_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueCreateManyCountryInput = {
    id?: string
    name: string
    slug: string
    sportId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeagueUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: SportUpdateOneRequiredWithoutLeaguesNestedInput
    bookmakerLinks?: BookmakerLeagueUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    sportId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmakerLinks?: BookmakerLeagueUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    sportId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}